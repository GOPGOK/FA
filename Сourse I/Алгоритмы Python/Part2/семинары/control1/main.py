"""1.	Создайте класс Летательный аппарат с методом, позволяющими вывести на экран информацию об объекте. 

Создайте дочерние классы для летательных аппаратов:

Самолеты (название, цена, скорость, тип самолета (истребитель, штурмовик, бомбардировщик,гражданский (может быть транспортный, может быть пассажирский)), 
тип вооружения, максимальная высота полета, высота полета, запас топлива в баке, максимальный запас топлива, расход топлива, страна производитель, страна владелец).
Методы:
расчет времени полета на имеющемся запасе топлива;
расчет возможности полета на введенное расстояние;
расчет возможности поражения цели (если самолет военный: для бомбардировщика наземные, истребитель любые летательные объекты, штурмовик наземные и летательные объекты);
расчет возможности полета на заданное расстояние без дозаправки.

Вертолеты (название, цена, количество членов экипажа, грузоподъемность, тип объекта (военный, медицинский, транспортный), высота полета, место расположение объекта, страна производитель, страна владелец).

В качестве методов в дочернем классе Вертолетов должны быть реализованы:
расчет количества вертолетов для перевозки груза за заданное количество полетов
(Пример: если требуется перевезти 40 т. программа должна использовать только вертолеты транспортные, при заданном количестве полетов 2 возможно использование одного вертолета с грузоподъемностью более 20 т, но менее 40. Если количество полётов равно 1, то возможно использование вертолетов с грузоподъемностью более или равной 40 т., если такого вертолета нет в созданном списке объектов, то требуется уведомить о невозможности совершения грузоперевозки). 


Создайте класс для Средств ПВО с методом вывода информации об объекте.


Подклассы:

Ракетные (название, дальность, высота поражения, скорость ракет, количество ракет в установке, стационарное или перемещаемое, скорость перемещения, количество людей в расчете).

Метод: расчет возможности поражения летательного объекта (скорость ракеты должна быть больше скорости летательного аппарата).

Зенитные (название, высота поражения, количество снарядов, калибр, количество стволов, количество людей в расчете) Метод: расчет возможности поражения объекта по высоте (высота поражения должна быть больше высоты полета летательного объекта).

Класс Объекты поражения (название, тип).
Метод: вывод информации об объекте.


Программа должна: 
1.	предоставлять пользователю возможность создания списка летательных объектов, средств ПВО и Объектов поражения;
2.	предоставлять возможность вывода информации о летательном объекте, средстве ПВО и Объекте поражения;
3.	выполнить расчет времени полета на имеющемся запасе топлива; (для самолетов)
4.	выполнить расчет возможности полета на введенное расстояние без дозаправки; (для самолетов)
5.	для выбранного летательного объектов выполнять расчет возможности поражения заданного объекта (объект может быть летательным или наземным); (для самолетов)
6.	предоставлять расчет количества вертолетов для перевозки груза за заданное количество полетов; (для вертолетов)
7.	предоставлять расчета возможности поражения летательного объекта с учетом его скорости и высоты полета.
В программе должно использоваться минимально 2 рекурсии на усмотрение учащегося. Допускается обоснованное изменение структуры классов при программной реализации. Итоговое задание требуется разбить на модули.
PS. Да, я знаю, что самолеты входят в средства ПВО.
"""

class AircraftClass:
    """Класс летательный аппарат"""
    def __init__(self, name, price, object_type, flight_altitude, producing_country, owner_country):
        """
        Общие поля: название, цена, тип объекта, высота полета, страна производитель, страна владелец
        """
        self.name = name
        self.price = price
        self.object_type = object_type
        self.flight_altitude = flight_altitude
        self.producing_country = producing_country
        self.owner_country = owner_country


    def info(self):
        """Метод для вывода информации об обекте"""
        d_formater = {}
        d_formater["Имя"] = self.name
        d_formater["Цена"] = self.price
        d_formater["Тип объекта"] = self.object_type
        d_formater["Высота полета"] = self.flight_altitude
        d_formater["Страна-производитель"] = self.producing_country
        d_formater["Страна-владелец"] = self.owner_country

        out_str = "*Общая информация о летательном аппарате*\n"
        out_str+="\n".join(list([str(k)+": "+str(v) for k, v in d_formater.items()]))
        print(out_str)

class PlaneClass(AircraftClass):
    """Дочерний класс самолет"""
    def __init__(self, name, price, object_type, flight_altitude, producing_country, owner_country, speed, weapon_type, altitude_max, fuel, fuel_max, fuel_consumption):
        """
        Общие поля с Aircraft:
        Название, цена, тип объекта, высота полета, страна производитель, страна владелец
        Различные поля с Aicraft:
        Скорость,тип вооружения, максимальная высота полета, запас топлива в баке, максимальный запас топлива, расход топлива
        """
        super.__init__(name, price, object_type, flight_altitude, producing_country, owner_country)
        
        #Список для фильтрации типа самолетов
        type_detector_list = ["истребитель", "штурмовик", "бомбардировщик", "гражданский транспортный", "гражданский пассажирский"]
        self.speed = speed
        self.weapon_type = weapon_type
        self.altitude_max = altitude_max
        self.fuel = fuel
        self.fuel_max = fuel_max
        #Это расход топлива, учим английский
        self.fuel_consumption = fuel_consumption

    
    def fuel_calculation(self):
        """Расчет времени полета на имеющемся запасе топлива"""
        pass
    
    def flight_opportunity_max(self):
        """Расчет возможности полета на введенное расстояние с дозаправкой (т.е. с использованием полного бака)"""
        pass

    def murder_opportunity(self):
        """
        Расчет возможности поражения цели если самолет военный
        - Для бомбардировщика наземные,
        - Истребитель - любые летательные объекты
        - штурмовик - наземные и летательные объекты
        """
        pass

    def flight_opportunity_current(self):
        """расчет возможности полета на заданное расстояние без дозаправки."""
        pass


class HelicopterClass(AircraftClass):
    """Дочерний класс вертолет"""
    pass


if __name__ == "__main__":
    o = AircraftClass("КОТ", 2445, "Военный",435345, "Россия", "Китай" )
    o.info()