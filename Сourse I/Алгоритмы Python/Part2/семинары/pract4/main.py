"""
Разработать программное средство с использованием ООП для представления успеваемости студентов по дисциплине:
1)	Промежуточная аттестация максимум 20 баллов, разбитые по количеству работ (практики, контрольная и тестирование в 1 половине семестра);
2)	Работа в семестре 20 баллов (практики, контрольная и тестирование во 2 половине семестра);
3)	Экзамен 60 баллов;
4)	Выставление итоговой оценки.
Объект класса должен содержать поля для сохранения имени студента и истории получения баллов (по практикам, контрольным и тестированиям) с учетом даты получения оценки по схеме: выполнено, защищено.
"""
import datetime

class Work:
    """
    Класс работы

    !! К работе не относится экзамен
    """
    def __init__(self, name, type, date):
        allowed_list = ["практика", "контрольная", "тестирование"]
        if type not in allowed_list:
            raise ValueError("Некорректнй тип работы!")

class Student:
    """
    Класс студент
    У студента есть:
    - практические
    - контрольные
    - тестирование (тесты)
    
    Методы:
    - Добавление баллов по практической        <- это все один метод, который в зависимости от типа, добавляет объект работы в list
    - Добавление баллов по контрольной
    - Добавление баллов по тестированию

    - Добавление баллов по экзамену
    - Получение общего кол-ва баллов
    - Получение статиситка по кол-ву работ
    - Получение итоговой оценки

    """
    def __init__(self, name, group, course):
        pass

    def info(self):
        """Информация о студенте"""
        pass

    def add_certification(self):
        """Метод добавления аттестации"""
        pass




#########################################
class Certification:
    """
    Класс аттестации

    - Добавление баллов по практической        <- это все один метод, который в зависимости от типа, добавляет объект работы в list
    - Добавление баллов по контрольной
    - Добавление баллов по тестированию

    """
    def __init__(self, student_name)

class IntermediateCertification(Certification):
    """
    Класс промежуточной аттестации 
    """
class 

def main():
    """
    Общий алгоритм
    - Генерим студента
    - Генерим промежуточную аттестацию/аттестацию
    - Генерим работу

    - Добавляем объект аттестации к студенту
    - В объект аттестации добавляем работы
    - Добавляем объект работы к промежуточной аттестации

    Повторяем сколько надо

    В конце, в методе получения итоговой оценки, надо понять, что 
    """