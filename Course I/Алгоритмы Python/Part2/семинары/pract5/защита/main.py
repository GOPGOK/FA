import numpy as np
import random
#–ë–µ–ª—ã–µ - —ç—Ç–æ —Å–∏–Ω–∏–µ
#–ß–µ—Ä–Ω—ã–µ - —ç—Ç–æ –∫—Ä–∞—Å–Ω—ã–µ

#TODO 1.	–ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤–≤–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–∞—à–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ, –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç —Å–≤–æ–∏—Ö —à–∞—à–µ–∫ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—à–µ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 6 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞);
class UtilClass:
    """–ö–ª–∞—Å—Å —Å–æ –≤—Å—è–∫–æ–π —Ñ–∏–≥–Ω–µ–π"""
    @staticmethod
    def xint2char(xint):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –±—É–∫–≤—É"""
        d = {0:"A",1:"B", 2:"C", 3:"D", 4:"E", 5: "F", 6: "G", 7: "H"}
        
        if xint in d:
            return d[xint]
        else:
            raise ValueError("–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ xint {}".format(xint))
     
    @staticmethod
    def char2xint(char):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–∫–≤—ã –≤ —á–∏—Å–ª–æ"""
        d = {"A" : 0, "B" : 1, "C" : 2, "D": 3, "E":4, "F":5, "G":6 , "H":7}
        if char in d:
            return d[char]
        else:
            raise ValueError("–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ char {}".format(char))
     
class FieldClass:
    """
    –ö–ª–∞—Å—Å 1 –∫–ª–µ—Ç–∫–∏ –¥–æ—Å–∫–∏
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –ó–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∞ —Ç–æ –∫–µ–º?
    - –¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
    - –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ –∫–ª–µ—Ç–∫–µ
    
    –ú–µ—Ç–æ–¥—ã:
    - –ó–∞–Ω—è—Ç–∏–µ/—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    """
    def __init__(self, coord_x, coord_y, figure_obj=None):
        self.coord_x = coord_x
        self.coord_y = coord_y
        self.figure_obj = figure_obj
        self.color_generator()
    
    def color_generator(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        x = UtilClass.char2xint(self.coord_x)
        y = self.coord_y

        if (x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1):
            color = "white"
        else:
            color = "black"
        
        self.color = color
    
    def isfree(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞"""
        if self.figure_obj == None:
            return True
        return False

    def field_reserve(self, figure_obj):
        """
        –ó–∞–Ω—è—Ç–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
        """
        self.figure_obj = figure_obj

    def field_free(self):
        """
        –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
        """
        self.figure_obj = None

    def __str__(self):
        """–í—ã–≤–æ–¥ —è—á–µ–π–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        board_color2print_dict = {"black" : "‚¨õÔ∏è", "white": "‚¨úÔ∏è"}
        figure_color2print_dict = {"black" : "üî¥", "white": "üîµ"}
        #–ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è -> –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –µ–µ —Ü–≤–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
        if self.isfree():
            return board_color2print_dict[self.color]
        #–ï—Å–ª–∏ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ -> –≤—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç —à–∞—à–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç
        return figure_color2print_dict[self.figure_obj.color]

class FigureClass:
    """
    –ö–ª–∞—Å—Å —Ñ–∏–≥—É—Ä—ã (—à–∞—à–∫–∏)
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –¶–≤–µ—Ç (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π) –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    """
    def __init__(self, color, coord_x, coord_y):
        self.color = color
        self.coord_x = coord_x
        self.coord_y = coord_x

    def movement(self, oldfield_obj, newfield_obj):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã
        - –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ —è—á–µ–π–∫–µ
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ñ–∏–≥—É—Ä—ã
        - –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –Ω–æ–≤–æ–π —è—á–µ–π–∫–µ
        """
        oldfield_obj.figure_obj = None
        self.coord_x = newfield_obj.coord_x
        self.coord_x = newfield_obj.coord_y
        newfield_obj.figure_obj = self

class BoardClass:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏"""
    def __init__(self):
        self.board = None
        self.board_generator()
        print(self)
        self.figure_generator()

    def board_generator(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –±–µ–∑ —Ñ–∏–≥—É—Ä"""

        board = np.array([])
        for x in np.arange(8):
            for y in np.arange(8):
                field_obj = FieldClass(UtilClass.xint2char(x), y) 
                board = np.append(field_obj, board)
        
        self.board = np.array(board.reshape(8,8))

    def figure_generator(self):
        """–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–≥—É—Ä –ø–æ –ø–æ–ª—é –∏ –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
        board = self.board
        for x in np.arange(8):
            for y in np.arange(8):
                if x < 3 and not((x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)):
                    board[x][y].field_reserve(FigureClass("black", x, y))
                elif x > 4 and not((x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)):
                    board[x][y].field_reserve(FigureClass("white", x, y))
        
        self.board = board

    def __str__(self):
        """–í—ã–≤–æ–¥ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ –Ω–µ —ç–∫—Ä–∞–Ω"""
        board = self.board
        for i in np.arange(board.shape[0]):
            for j in np.arange(board.shape[1]):
                print('{}'.format(board[i][j]), end="")
            print("")
        return ""

        
class MainClass():
    """–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã"""
    def __init__(self):
        self.stopgame_flag = False
        #–°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
        board = BoardClass()
        print(board)
        self.gameprocess()

    def gameprocess(self):
        """–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã"""
        while not self.stopgame_flag:
            command_input = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É -> ")
            
    def computer_game(self):
        """–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"""
        pass

if __name__ == "__main__":
    MainClass()