import numpy as np
import random
#–ë–µ–ª—ã–µ - —ç—Ç–æ —Å–∏–Ω–∏–µ
#–ß–µ—Ä–Ω—ã–µ - —ç—Ç–æ –∫—Ä–∞—Å–Ω—ã–µ

#–í–æ–π–Ω–∞ - —ç—Ç–æ –º–∏—Ä
#–°–≤–æ–±–æ–¥–∞ - —ç—Ç–æ —Ä–∞–±—Å—Ç–≤–æ
#–ù–µ–∑–Ω–∞–Ω–∏–µ - —ç—Ç–æ —Å–∏–ª–∞

class UtilClass:
    """–ö–ª–∞—Å—Å —Å–æ –≤—Å—è–∫–æ–π —Ñ–∏–≥–Ω–µ–π"""
    @staticmethod
    def xint2char(xint):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –±—É–∫–≤—É"""
        d = {0:"A",1:"B", 2:"C", 3:"D", 4:"E", 5: "F", 6: "G", 7: "H"}
        
        if xint in d:
            return d[xint]
        else:
            raise ValueError("–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ xint {}".format(xint))
     
    @staticmethod
    def char2xint(char):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–∫–≤—ã –≤ —á–∏—Å–ª–æ"""
        d = {"A" : 0, "B" : 1, "C" : 2, "D": 3, "E":4, "F":5, "G":6 , "H":7,
            "a": 0, "b" : 1, "c" :2, "d" : 3, "e" : 4, "f" : 5, "g" : 6, "h" : 7
        }
        if char in d:
            return d[char]
        else:
            raise ValueError("–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ char {}".format(char))
    
    @staticmethod
    def checkxy_value(part):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã xy"""
        if type(part) != str or len(part) != 2:
            return False

        l1 = ["A", "B", "C", "D", "E", "F", "G", "H", "a","b", "c", "d", "e", "f", "g", "h"]
        l2 = list(map(str, range(1,9)))
        if part[0] in l1 and part[1] in l2:
            return True
        return False

class FieldClass:
    """
    –ö–ª–∞—Å—Å 1 –∫–ª–µ—Ç–∫–∏ –¥–æ—Å–∫–∏
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –ó–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∞ —Ç–æ –∫–µ–º?
    - –¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
    - –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ –∫–ª–µ—Ç–∫–µ
    
    –ú–µ—Ç–æ–¥—ã:
    - –ó–∞–Ω—è—Ç–∏–µ/—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    """
    def __init__(self, coord_x, coord_y, figure_obj=None):
        self.coord_x = coord_x
        self.coord_y = coord_y
        self.figure_obj = figure_obj
        self.color_generator()
    
    def color_generator(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        x = UtilClass.char2xint(self.coord_x)
        y = self.coord_y

        if (x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1):
            color = "black"
        else:
            color = "white"
        
        self.color = color
    
    def isfree(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞"""
        if self.figure_obj == None:
            return True
        return False

    def field_reserve(self, figure_obj):
        """
        –ó–∞–Ω—è—Ç–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
        """
        self.figure_obj = figure_obj

    def field_free(self):
        """
        –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
        """
        self.figure_obj = None

    def __str__(self):
        """–í—ã–≤–æ–¥ —è—á–µ–π–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        board_color2print_dict = {"black" : "‚¨õÔ∏è", "white": "‚¨úÔ∏è"}
        # figure_color2print_dict = {"black" : "üî¥", "white": "üîµ", "TEST" : "üç∫"}
        figure_color2print_dict = {"black" : "üëπ", "white": "üç∫", "TEST" : "üí©"}
        #–ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è -> –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –µ–µ —Ü–≤–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
        if self.isfree():
            return board_color2print_dict[self.color]
        #–ï—Å–ª–∏ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ -> –≤—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç —à–∞—à–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç
        return figure_color2print_dict[self.figure_obj.color]

class FigureClass:
    """
    –ö–ª–∞—Å—Å —Ñ–∏–≥—É—Ä—ã (—à–∞—à–∫–∏)
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –¶–≤–µ—Ç (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π) –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    """
    def __init__(self, color, coord_x, coord_y):
        self.color = color
        self.coord_x = coord_x
        self.coord_y = coord_x

class BoardClass:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏"""
    def __init__(self, generator_way, user_color):

        self.user_color = user_color
        figuregenerator_dict = {
            1 : self.figuremanual_generator,
            2 : self.figureauto_generator,
        }
        self.board = None
        self.board_generator()

        if generator_way in figuregenerator_dict:
            figuregenerator_dict[generator_way]()
        else:
            raise ValueError("–ù–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–≥—É—Ä {}!".format(generator_way))

    def board_generator(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –±–µ–∑ —Ñ–∏–≥—É—Ä"""

        board = np.array([])
        for x in np.arange(8):
            for y in np.arange(8):
                field_obj = FieldClass(UtilClass.xint2char(x), y) 
                board = np.append(field_obj, board)
        self.board = np.array(board.reshape(8,8))

    def detect_element(self, search_x, search_y):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞ –¥–æ—Å–∫–µ
        –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –Ω–µ –≤—ã–µ—Ö–∞—Ç—å –∑–∞ –º–∞—Å—Å–∏–≤
        """
        search_x = UtilClass.xint2char(search_x)
        board = self.board
        for x in np.arange(8):
            for y in np.arange(8):
                if board[x][y].coord_x == search_x and board[x][y].coord_y == search_y:
                    return True
        return False

    def figureauto_generator(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ 12 —Ñ–∏–≥—É—Ä –ø–æ –ø–æ–ª—é"""
        uc = self.user_color
        reverse_uc = "black" if uc == "white" else "white"

        board = self.board
        for x in np.arange(8):
            for y in np.arange(8):
                if x < 3 and ((x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)):
                    board[x][y].field_reserve(FigureClass(uc, x, y))
                elif x > 4 and ((x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)):
                    board[x][y].field_reserve(FigureClass(reverse_uc, x, y))
        self.board = board

    def boardfigure_setter(self, color, search_x, search_y):
        """
        –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ñ–∏–≥—É—Ä—ã –∏ –µ–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        –í–æ–∑–≤—Ä–∞—Ç True - —Ñ–∏–≥—É—Ä–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        –í–æ–∑–≤—Ä–∞—Ç False - —Ñ–∏–≥—É—Ä–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        x = search_x
        y = UtilClass.char2xint(search_y)
        board = self.board

        if board[x][y].isfree() and board[x][y].color == "black":
            board[x][y].field_reserve(FigureClass(color, x,y))
            self.board = board
            return True
        return False

    def figuremanual_generator(self):

        """–†—É—á–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ 6 —Ñ–∏–≥—É—Ä –ø–æ –ø–æ–ª—é"""
        format_dict = {"white" : "–±–µ–ª–æ–≥–æ", "black":"—á—ë—Ä–Ω–æ–≥–æ"}
        for color in ("white", "black"):
            print("\033[93m*–í—ã—Å—Ç–∞–≤–ª—è–µ–º —à–∞—à–∫–∏ {} —Ü–≤–µ—Ç–∞*\033[0m".format(format_dict[color]))
            for i in range(5):
                
                boolean_flag = True
                while boolean_flag:
                    print(self)
                    coord_input = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —à–∞—à–∫–∏ ‚Ññ{} -> ".format(i+1))
                    if UtilClass.checkxy_value(coord_input):
                        coord_x = int(coord_input[1])-1
                        coord_y = coord_input[0]
                        result = self.boardfigure_setter(color, coord_x, coord_y)
                        if result:
                            print("–£—Å–ø–µ—à–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞—à–∫–∏ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ")
                            boolean_flag = False
                        else:
                            print("–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç!")
                    else: 
                        print("–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: h2")


    def __str__(self):
        """–í—ã–≤–æ–¥ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ –Ω–µ —ç–∫—Ä–∞–Ω"""
        board = self.board
        for i in np.arange(board.shape[0]-1,-1,-1):
            print("{}".format(i+1), end="")
            for j in np.arange(board.shape[1]):
                print('{}'.format(board[i][j]), end="")
            print("")
        print("  A B C D E F G H")
        return ""

class AnalyserClass:
    """–ö–ª–∞—Å—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ö–æ–¥–∞"""
    def __init__(self, command_dict, board_obj):
        
        self.boolean_result = False
        self.results_list = []
        self.command_dict = command_dict
        self.board_obj = board_obj

        self.fugure_detector()
        self.backstep_detector()
        self.diagonal_detector()
        self.fieldtype_detector()
        if command_dict["mode"] == "war":
            self.war_detector()
        
        print(self.results_list)

        if all(self.results_list):
            self.boolean_result = True

    def fugure_detector(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å—Ç–æ–∏—Ç –ª–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ —Ñ–∏–≥—É—Ä–∞ –∏ –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç, —Ç–æ —Å–≤–æ—è –ª–∏"""
        
        board_obj = self.board_obj
        d = self.command_dict

        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —è—á–µ–π–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–≥—É—Ä—É
        target_x = d["from"]["x"]
        target_y = UtilClass.char2xint(d["from"]["y"])
        if not board_obj.detect_element(target_x, target_y):
            self.results_list.append(False)
            return
        
        #–ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–≥—É—Ä–∞ –∏ –µ–µ —Ü–≤–µ—Ç —Ç–æ—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏–≥—Ä–∞–µ–º
        selected_field = board_obj.board[target_x][target_y]
        if not selected_field.isfree() and selected_field.figure_obj.color == d["user_color"]:
            self.results_list.append(True)
        else:
            self.results_list.append(False)

    def backstep_detector(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥"""
        d = self.command_dict
        if d["from"]["x"] > d["to"]["x"]:
            self.results_list.append(False)
        else:
            self.results_list.append(True)

    def diagonal_detector(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏"""
        #–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏, –∫—É–¥–∞ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ —à–∞—à–∫–∞ (–∏—Ö –≤—Å–µ–≥–æ 4)
        board_obj = self.board_obj
        d = self.command_dict
        target_x = d["from"]["x"]
        target_y = UtilClass.char2xint(d["from"]["y"])
        #–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–µ—Ç–∫–∏, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–π—Ç–∏ –∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –¥–æ—Å–∫–µ

        #–¢.–∫. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "–∫–æ—Ä–æ—Ç–∫–∏—Ö" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –ø—Ä–∏ –∞—Ç–∞–∫–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
        if d["mode"] == "war":
            allowedfields_list = [[target_x+2,target_y+2], [target_x+2,target_y-2]]
        #–ü—Ä–∏ —Ç–∏—Ö–æ–º —Ö–æ–¥–µ –≤–æ–∑–º–æ–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        else:
            allowedfields_list = [[target_x+1,target_y+1], [target_x+1,target_y-1]]
        
        validated_points = [e for e in allowedfields_list if board_obj.detect_element(*e)]

        if [d["to"]["x"], UtilClass.char2xint(d["to"]["y"])] in validated_points:
            self.results_list.append(True)
        else:
            self.results_list.append(False)    
        
        #self.board_obj.board[x][y].figure_obj = FigureClass("TEST", x, y)

    def fieldtype_detector(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —è—á–µ–π–∫–æ–π.
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
        - –ó–∞–Ω—è—Ç–æ—Å—Ç—å —è—á–µ–π–∫–∏
        - –¶–≤–µ—Ç —è—á–µ–π–∫–∏
        """

        #–ü–æ–Ω—è—Ç–Ω–æ–µ –¥–µ–ª–æ, —á—Ç–æ –º—ã —è—á–µ–π–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –≤ diagonal_detector, –Ω–æ –ú–ê–õ–û –õ–ò
        d = self.command_dict
        board_obj = self.board_obj
        x = d["to"]["x"]
        y = UtilClass.char2xint(d["to"]["y"])
        if not board_obj.detect_element(x,y):
            self.results_list.append(False)
            return

        selected_field = board_obj.board[x][y]
        if selected_field.color == "black" and selected_field.isfree():
            self.results_list.append(True)
        else:
            self.results_list.append(False)

    def war_detector(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –±–æ–µ–º
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–± –±—ã–ª–∞ —Ñ–∏–≥—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –∞—Ç–∞–∫—É–µ–º
        - –ü–æ–∏—Å–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ñ–∏–≥—É—Ä—ã, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ self.command_dict
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–± —Ü–≤–µ—Ç —Ñ–∏–≥—É—Ä—ã –±—ã–ª –Ω–µ –Ω–∞—à
        """
        d = self.command_dict
        board_obj = self.board_obj

        x_start = d["from"]["x"]
        y_start = UtilClass.char2xint(d["from"]["y"])

        x_finish = d["to"]["x"]
        y_finish = UtilClass.char2xint(d["to"]["y"])
        
        #–°–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        middle_points = np.array([e for e in [[x_finish-1,y_finish-1], [x_finish-1,y_finish+1]] if board_obj.detect_element(*e)])


        #–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏, –≥–¥–µ —Å—Ç–æ–∏—Ç —Ñ–∏–≥—É—Ä–∞
        validated_points = np.array([e for e in [[x_start+1,y_start+1], [x_start+1,y_start-1]] if board_obj.detect_element(*e)])

        attack_points = []
        for i in np.arange(middle_points.shape[0]):
            for j in np.arange(validated_points.shape[0]):
                if middle_points[i][0] == validated_points[j][0] and middle_points[i][1] == validated_points[j][1]:
                    attack_points = middle_points[i]
                    break

        #–ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        if len(attack_points) == 0:
            self.results_list.append(False)
            return

        self.command_dict["enemy"] = {}
        self.command_dict["enemy"]["x"], self.command_dict["enemy"]["y"] = attack_points
        attack_x, attack_y = attack_points

        #–í—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É, –≥–¥–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –≤—Ä–∞–≥
        attack_field = board_obj.board[attack_x][attack_y]
        #–ï—Å–ª–∏ –µ—Å—Ç—å —á—É–∂–∞—è —Ñ–∏–≥—É—Ä–∞ –Ω–∞ —ç—Ç–æ–π —Ç–æ—á–∫–µ
        if not attack_field.isfree() and attack_field.figure_obj.color != d["user_color"]:
            self.results_list.append(True)
        else:
            self.results_list.append(False)

#TODO
class GameOverClass:
    """–ö–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã"""
    def __init__(self, board):
        self.result = False
        self.board = board

        self.queen_detector()
        self.nofigures_detector()
        self.deadlock_detector()
    
    def queen_detector(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∞ —à–∞—à–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –≤ –¥–∞–º–∫–∏"""
        pass

    def nofigures_detector(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —É –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∏–≥—É—Ä"""
        pass

    def deadlock_detector(self):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—É–ø–∏–∫–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É —Ö–æ–¥—É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        """
        pass

class MainClass:
    """–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã"""
    def __init__(self):
        #–°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
        usercolor = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —à–∞—à–µ–∫:\n1. –ë–µ–ª—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n2. –ß–µ—Ä–Ω—ã–π\n-> ")
        self.usercolor = "black" if usercolor == "2" else "white"
        
        generator_mode = input("–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞—à–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ:\n1. –†—É—á–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞, 6 —Ñ–∏–≥—É—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞, 12 —Ñ–∏–≥—É—Ä\n-> ")
        board_obj = BoardClass(2, self.usercolor) if generator_mode == "2" else BoardClass(1, self.usercolor)
        print(board_obj)

        #board_obj.board[3][3].figure_obj = FigureClass("TEST", 3, 3)

        self.board_obj = board_obj
        self.gameprocess()

    def command_parser(self, cmd):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ
        """

        movement_type_dict = {":" : "war", "-" : "peace"}
        #–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ 2 —á–∞—Å—Ç–∏
        spliter = ""
        detect_flag = False
        for key in movement_type_dict.keys():
            if key in cmd:
                detect_flag = True
                spliter = key
                break
        
        if not detect_flag:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–º–º–∞–Ω–¥! ':' - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å –±–æ–µ–º, '-' - —Ç–∏—Ö–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ")
            return {}

        command_dict = {"from": {}, "to": {}, "mode": movement_type_dict[spliter], "user_color" : self.usercolor}
        #–†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ 2 —á–∞—Å—Ç–∏
        part1, part2 = cmd.split(spliter)
        if UtilClass.checkxy_value(part1) and UtilClass.checkxy_value(part2):
            command_dict["from"]["x"] = int(part1[1])-1
            command_dict["from"]["y"] = part1[0]
            command_dict["to"]["x"] = int(part2[1])-1
            command_dict["to"]["y"] = part2[0]
            return command_dict

        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")
        return {}

        
    def gameprocess(self):
        """–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã"""
        print("\033[93m*–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å*\033[0m")
        stopgame_flag = True
        while stopgame_flag:
            
            cmd = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É -> ")
            result_dict = self.command_parser(cmd)
            
            #–ï—Å–ª–∏ –Ω–æ—Ä–∞–ª—å–Ω–æ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            if result_dict != {}:
                self.result_dict = result_dict
                #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                obj = AnalyserClass(result_dict, self.board_obj)
                #–ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–º —Ö–æ–¥
                if obj.boolean_result:
                    self.result_dict = obj.command_dict
                    #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ–¥–∏—Ç
                    self.user_mode()
                    #–ö–æ–º–ø—å—é—Ç–µ—Ä —Ö–æ–¥–∏—Ç
                    self.computer_mode()

            #–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
            obj = GameOverClass(self.board_obj.board)
            if obj.result:
                stopgame_flag = False

            #–í—ã–≤–æ–¥ –¥–æ—Å–∫–∏
            print(self.board_obj)
    
    def user_mode(self):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        """
        d = self.result_dict
        board = self.board_obj.board
        
        mode = d["mode"]
        f1 = [d["from"]["x"], UtilClass.char2xint(d["from"]["y"])]
        f2 = [d["to"]["x"], UtilClass.char2xint(d["to"]["y"])]
        x1, y1 = f1
        x2, y2 = f2
        field_from = board[x1][y1]
        field_to = board[x2][y2]

        #–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã —Å —è—á–µ–π–∫–∏ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–º –¥–ª—è –Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        figure_obj = field_from.figure_obj
        figure_obj.coord_x, figure_obj.coord_y = f2

        #–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–µ
        field_to.field_reserve(figure_obj)
        #–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π
        field_from.field_free()

        #–ï—Å–ª–∏ –º—ã –∫–æ–≥–æ-—Ç–æ –±—ä—ë–º, —Ç–æ —É–¥–∞–ª—è–µ–º —Ñ–∏–≥—É—Ä—É —Å —Ç–æ–π —è—á–µ–π–∫–∏
        if mode == "war":
            attack_x, attack_y = d["enemy"]["x"], d["enemy"]["y"]
            board[attack_x][attack_y].field_free()

        self.board_obj.board = board
    
    #TODO
    def computer_mode(self):
        """–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"""
        pass

if __name__ == "__main__":
    MainClass()