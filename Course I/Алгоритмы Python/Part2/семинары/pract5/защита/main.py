import numpy as np
import random
#–ë–µ–ª—ã–µ - —ç—Ç–æ —Å–∏–Ω–∏–µ
#–ß–µ—Ä–Ω—ã–µ - —ç—Ç–æ –∫—Ä–∞—Å–Ω—ã–µ

#–í–æ–π–Ω–∞ - —ç—Ç–æ –º–∏—Ä
#–°–≤–æ–±–æ–¥–∞ - —ç—Ç–æ —Ä–∞–±—Å—Ç–≤–æ
#–ù–µ–∑–Ω–∞–Ω–∏–µ - —ç—Ç–æ —Å–∏–ª–∞

#TODO 1.	–ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤–≤–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–∞—à–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ, –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç —Å–≤–æ–∏—Ö —à–∞—à–µ–∫ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—à–µ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 6 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞);
#TODO –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è??

class UtilClass:
    """–ö–ª–∞—Å—Å —Å–æ –≤—Å—è–∫–æ–π —Ñ–∏–≥–Ω–µ–π"""
    @staticmethod
    def xint2char(xint):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –±—É–∫–≤—É"""
        d = {0:"A",1:"B", 2:"C", 3:"D", 4:"E", 5: "F", 6: "G", 7: "H"}
        
        if xint in d:
            return d[xint]
        else:
            raise ValueError("–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ xint {}".format(xint))
     
    @staticmethod
    def char2xint(char):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–∫–≤—ã –≤ —á–∏—Å–ª–æ"""
        d = {"A" : 0, "B" : 1, "C" : 2, "D": 3, "E":4, "F":5, "G":6 , "H":7,
            "a": 0, "b" : 1, "c" :2, "d" : 3, "e" : 4, "f" : 5, "g" : 6, "h" : 7
        }
        if char in d:
            return d[char]
        else:
            raise ValueError("–ù–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ char {}".format(char))
    
    @staticmethod
    def checkxy_value(part):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã xy"""
        if type(part) != str or len(part) != 2:
            return False

        l1 = ["A", "B", "C", "D", "E", "F", "G", "H", "a","b", "c", "d", "e", "f", "g", "h"]
        l2 = list(map(str, range(1,9)))
        if part[0] in l1 and part[1] in l2:
            return True
        return False

class FieldClass:
    """
    –ö–ª–∞—Å—Å 1 –∫–ª–µ—Ç–∫–∏ –¥–æ—Å–∫–∏
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –ó–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∞ —Ç–æ –∫–µ–º?
    - –¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
    - –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ –∫–ª–µ—Ç–∫–µ
    
    –ú–µ—Ç–æ–¥—ã:
    - –ó–∞–Ω—è—Ç–∏–µ/—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    """
    def __init__(self, coord_x, coord_y, figure_obj=None):
        self.coord_x = coord_x
        self.coord_y = coord_y
        self.figure_obj = figure_obj
        self.color_generator()
    
    def color_generator(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        x = UtilClass.char2xint(self.coord_x)
        y = self.coord_y

        if (x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1):
            color = "black"
        else:
            color = "white"
        
        self.color = color
    
    def isfree(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞"""
        if self.figure_obj == None:
            return True
        return False

    def field_reserve(self, figure_obj):
        """
        –ó–∞–Ω—è—Ç–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
        """
        self.figure_obj = figure_obj

    def field_free(self):
        """
        –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
        """
        self.figure_obj = None

    def __str__(self):
        """–í—ã–≤–æ–¥ —è—á–µ–π–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        board_color2print_dict = {"black" : "‚¨õÔ∏è", "white": "‚¨úÔ∏è"}
        #TODO figure_color2print_dict = {"black" : "üî¥", "white": "üîµ", "TEST" : "üç∫"}
        figure_color2print_dict = {"black" : "üëπ", "white": "üç∫", "TEST" : "üí©"}
        #–ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è -> –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –µ–µ —Ü–≤–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
        if self.isfree():
            return board_color2print_dict[self.color]
        #–ï—Å–ª–∏ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ -> –≤—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç —à–∞—à–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç
        return figure_color2print_dict[self.figure_obj.color]

class FigureClass:
    """
    –ö–ª–∞—Å—Å —Ñ–∏–≥—É—Ä—ã (—à–∞—à–∫–∏)
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –¶–≤–µ—Ç (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π) –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    """
    def __init__(self, color, coord_x, coord_y):
        self.color = color
        self.coord_x = coord_x
        self.coord_y = coord_x

class BoardClass:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏"""
    def __init__(self):
        self.board = None
        self.board_generator()
        self.figure_generator()

    def board_generator(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –±–µ–∑ —Ñ–∏–≥—É—Ä"""

        board = np.array([])
        for x in np.arange(8):
            for y in np.arange(8):
                field_obj = FieldClass(UtilClass.xint2char(x), y) 
                board = np.append(field_obj, board)
        
        self.board = np.array(board.reshape(8,8))

    def detect_element(self, search_x, search_y):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞ –¥–æ—Å–∫–µ
        –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –Ω–µ –≤—ã–µ—Ö–∞—Ç—å –∑–∞ –º–∞—Å—Å–∏–≤
        """
        search_x = UtilClass.xint2char(search_x)
        board = self.board
        for x in np.arange(8):
            for y in np.arange(8):
                if board[x][y].coord_x == search_x and board[x][y].coord_y == search_y:
                    return True
        return False

    def figure_generator(self):
        """–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–≥—É—Ä –ø–æ –ø–æ–ª—é –∏ –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
        board = self.board
        for x in np.arange(8):
            for y in np.arange(8):
                if x < 3 and ((x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)):
                    board[x][y].field_reserve(FigureClass("white", x, y))
                elif x > 4 and ((x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)):
                    board[x][y].field_reserve(FigureClass("black", x, y))
        
        self.board = board

    def __str__(self):
        """–í—ã–≤–æ–¥ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ –Ω–µ —ç–∫—Ä–∞–Ω"""
        board = self.board
        for i in np.arange(board.shape[0]-1,-1,-1):
            print("{}".format(i+1), end="")
            for j in np.arange(board.shape[1]):
                print('{}'.format(board[i][j]), end="")
            print("")
        print("  A B C D E F G H")
        return ""

class AnalyserClass:
    """–ö–ª–∞—Å—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ö–æ–¥–∞"""
    def __init__(self, command_dict, board_obj):
        self.boolean_result = False
        self.results_list = []
        self.command_dict = command_dict
        self.board_obj = board_obj

        self.fugure_detector()
        self.backstep_detector()
        self.diagonal_detector()
        self.fieldtype_detector()

        if command_dict["mode"] == "war":
            self.war_detector()
        else:
            self.peace_detector()
        
        print(self.results_list)
        if all(self.results_list):
            self.boolean_result = True

    #TODO
    def fugure_detector(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å—Ç–æ–∏—Ç –ª–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ —Ñ–∏–≥—É—Ä–∞ –∏ –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç, —Ç–æ —Å–≤–æ—è –ª–∏"""
        
        board_obj = self.board_obj
        d = self.command_dict

        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —è—á–µ–π–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–≥—É—Ä—É
        target_x = d["from"]["x"]
        target_y = UtilClass.char2xint(d["from"]["y"])
        if not board_obj.detect_element(target_x, target_y):
            self.results_list.append(False)
            return
        
        #–ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–≥—É—Ä–∞ –∏ –µ–µ —Ü–≤–µ—Ç —Ç–æ—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏–≥—Ä–∞–µ–º
        selected_field = board_obj.board[target_x][target_y]
        if selected_field.figure_obj != None and selected_field.figure_obj.color == d["user_color"]:
            self.results_list.append(True)
        else:
            self.results_list.append(False)

    def backstep_detector(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥"""
        d = self.command_dict
        if d["from"]["x"] > d["to"]["x"]:
            self.results_list.append(False)
        else:
            self.results_list.append(True)

    def diagonal_detector(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏"""
        #–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏, –∫—É–¥–∞ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ —à–∞—à–∫–∞ (–∏—Ö –≤—Å–µ–≥–æ 4)
        board_obj = self.board_obj
        d = self.command_dict
        target_x = d["from"]["x"]
        target_y = UtilClass.char2xint(d["from"]["y"])
        #–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–µ—Ç–∫–∏, –∫—É–¥–∞ –º–æ–∂–Ω–æ –ø–æ–π—Ç–∏ –∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –¥–æ—Å–∫–µ
        validated_points = [e for e in [[target_x+1,target_y+1], [target_x+2,target_y+2], [target_x+1,target_y-1], [target_x+2,target_y-2]] if board_obj.detect_element(*e)]

        if [d["to"]["x"], UtilClass.char2xint(d["to"]["y"])] in validated_points:
            self.results_list.append(True)
        else:
            self.results_list.append(False)    
        
        #self.board_obj.board[x][y].figure_obj = FigureClass("TEST", x, y)

    def fieldtype_detector(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —è—á–µ–π–∫–æ–π.
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
        - –ó–∞–Ω—è—Ç–æ—Å—Ç—å —è—á–µ–π–∫–∏
        - –¶–≤–µ—Ç —è—á–µ–π–∫–∏
        """
        #–ü–æ–Ω—è—Ç–Ω–æ–µ –¥–µ–ª–æ, —á—Ç–æ –º—ã —è—á–µ–π–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –≤ diagonal_detector, –Ω–æ –ú–ê–õ–û –õ–ò
        d = self.command_dict
        board_obj = self.board_obj
        x = d["to"]["x"]
        y = UtilClass.char2xint(d["to"]["y"])
        if not board_obj.detect_element(x,y):
            self.results_list.append(False)
            return

        selected_field = board_obj.board[x][y]
        if selected_field.color == "black" and selected_field.figure_obj == None:
            self.results_list.append(True)
        else:
            self.results_list.append(False)

    def war_detector(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –±–æ–µ–º"""
        pass

    def peace_detector(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –º–∏—Ä–æ–º"""
        pass

class MainClass:
    """–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∞—Å—Å —Å –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã"""
    def __init__(self):
        self.stopgame_flag = False
        #–°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
        board_obj = BoardClass()
        print(board_obj)
        self.board_obj = board_obj
        self.gameprocess()

    def command_parser(self, cmd):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ
        """
        movement_type_dict = {":" : "war", "-" : "peace"}
        #–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ 2 —á–∞—Å—Ç–∏
        spliter = None
        detect_flag = False
        for key in movement_type_dict.keys():
            if key in cmd:
                detect_flag = True
                spliter = key
                break
        
        if not detect_flag:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–º–º–∞–Ω–¥! ':' - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å –±–æ–µ–º, '-' - —Ç–∏—Ö–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ")
            return {}
        
        #TODO –ù–∞ –±—É–¥—É—â–µ–µ –≤—ã–±–∏—Ä–∞—Ç—å, –∑–∞ –∫–æ–≥–æ –∏–≥—Ä–∞—Ç—å
        command_dict = {"from": {}, "to": {}, "mode": movement_type_dict[spliter], "user_color" : "white"}
        #–†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ 2 —á–∞—Å—Ç–∏
        part1, part2 = cmd.split(spliter)
        if UtilClass.checkxy_value(part1) and UtilClass.checkxy_value(part2):
            command_dict["from"]["x"] = int(part1[1])-1
            command_dict["from"]["y"] = part1[0]
            command_dict["to"]["x"] = int(part2[1])-1
            command_dict["to"]["y"] = part2[0]
            return command_dict

        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")
        return {}

        
    def gameprocess(self):
        """–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã"""
        while not self.stopgame_flag:
            
            cmd = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É -> ")
            result_dict = self.command_parser(cmd)
            
            if result_dict != {}:
                self.result_dict = result_dict
                obj = AnalyserClass(result_dict, self.board_obj)
                
                if obj.boolean_result:
                    self.user_mode()
                    self.computer_mode()
                    print(self.board_obj)
    
    def user_mode(self):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        """
        #TODO –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–≥—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —É–±–∏–ª–∏ - —É–¥–∞–ª–∏—Ç—å –µ–µ
        d = self.result_dict
        board = self.board_obj.board
        mode = d["mode"]
        f1 = [d["from"]["x"], UtilClass.char2xint(d["from"]["y"])]
        f2 = [d["to"]["x"], UtilClass.char2xint(d["to"]["y"])]
        field_from = board[f1[0]][f1[1]]
        field_to = board[f2[0]][f2[1]]

        #–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã —Å —è—á–µ–π–∫–∏ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–º –¥–ª—è –Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        figure_obj = field_from.figure_obj
        figure_obj.coord_x, figure_obj.coord_y = f2
        
        #–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–µ
        field_to.field_reserve(figure_obj)
        #–û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π
        field_from.field_free()

        self.board_obj.board = board
            
    def computer_mode(self):
        """–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"""
        pass

if __name__ == "__main__":
    MainClass()