(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    344595,       7219]
NotebookOptionsPosition[    336181,       7064]
NotebookOutlinePosition[    336535,       7080]
CellTagsIndexPosition[    336492,       7077]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.780744233524158*^9, 3.780744233525609*^9}, 
   3.780750677046774*^9},ExpressionUUID->"dfdef68e-d752-4929-8146-\
ebb004141fc4"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["A", "3"], " ", 
  SuperscriptBox["and", "3"], " ", 
  SuperscriptBox["B", "3"], " ", 
  SuperscriptBox["not", "2"], " ", 
  SuperscriptBox["or", "2"], " ", "simplify"}]], "Output",
 CellChangeTimes->{3.7807442344364243`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"cd59111f-daa8-46a0-86d6-ece1953aae1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], "\[And]", "b"}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{"a", "\[And]", 
     RowBox[{"\[Not]", "b"}]}], ")"}], " ", "\[Or]", " ", 
   RowBox[{"(", 
    RowBox[{"a", " ", "\[And]", " ", "b"}], ")"}]}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.780744236318528*^9, 3.780744337205566*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"b8e011eb-c03c-4a41-a311-e1ffd7878299"],

Cell[BoxData[
 RowBox[{"a", "||", "b"}]], "Output",
 CellChangeTimes->{3.780744338320612*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"f1276e5c-1f89-44ca-8f68-ee72c4673a72"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], "\[And]", " ", 
     RowBox[{"\[Not]", "b"}], " ", "\[And]", 
     RowBox[{"\[Not]", " ", "\:0441"}], " ", "\[And]", 
     RowBox[{"\[Not]", "d"}]}], ")"}], "\[Or]", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], " ", "\[And]", " ", 
     RowBox[{"\[Not]", "b"}], "\[And]", " ", "\:0441", "\[And]", 
     RowBox[{"\[Not]", "d"}]}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], "\[And]", 
     RowBox[{"\[Not]", "b"}], "\[And]", "\:0441", "\[And]", "d"}], ")"}], " ",
    "\[Or]", " ", 
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], " ", "\[And]", "  ", "b", "\[And]", "  ", 
     "\:0441", "\[And]", " ", 
     RowBox[{"\[Not]", "d"}]}], ")"}], " ", "\[Or]", " ", 
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], " ", "\[And]", "  ", "b", "\[And]", "  ", 
     "\:0441", "\[And]", "d"}], ")"}], "\[Or]", " ", 
   RowBox[{"(", " ", 
    RowBox[{"a", " ", "\[And]", "  ", 
     RowBox[{"\[Not]", "b"}], "\[And]", " ", 
     RowBox[{"\[Not]", " ", "\:0441"}], "\[And]", 
     RowBox[{"\[Not]", "d"}]}], ")"}], " ", "\[Or]", 
   RowBox[{"(", 
    RowBox[{"a", " ", "\[And]", "  ", 
     RowBox[{"\[Not]", "b"}], "\[And]", "  ", "\:0441", "\[And]", 
     RowBox[{"\[Not]", "d"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.780750586912664*^9, 3.780750603486883*^9}, {
  3.780750695319865*^9, 3.7807507823165493`*^9}, {3.780753718375526*^9, 
  3.780753719791977*^9}, {3.7807543756375933`*^9, 3.780754383776154*^9}, {
  3.780923020995286*^9, 3.780923187836237*^9}},
 NumberMarks->False,
 CellLabel->"In[10]:=",ExpressionUUID->"74c53090-7a06-4dbe-b315-61169d0bf7d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"\:0441", "&&", 
    RowBox[{"!", "a"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "b"}], "&&", 
    RowBox[{"!", "d"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.7807445365527573`*^9, 3.780750605033112*^9, 3.780750784764756*^9, 
   3.780750904561564*^9, 3.780751081347498*^9, {3.780753706169553*^9, 
   3.78075372300408*^9}, 3.7807543844273863`*^9, 3.780923196671897*^9, 
   3.780923496900124*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"d594d8d6-57fd-4776-93f2-3c7ae8991250"]
}, Open  ]],

Cell[CellGroupData[{

Cell["(C and not A) or ( not B and  not D)", "WolframAlphaLong",
 CellChangeTimes->{{3.780923748240816*^9, 3.78092381005227*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"f5893d22-fdbb-45c6-aa5e-b95f7c32525e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "(C and not A) or ( not B and  not D)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"(C &&  !A) || ( !B &&  !D)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"C", "\[And]", 
                   RowBox[{"\[Not]", "A"}]}], ")"}], "\[Or]", 
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"\[Not]", "B"}], "\[And]", 
                   RowBox[{"\[Not]", "D"}]}], ")"}]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"(C &&  !A) || ( !B &&  !D)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"(\"", 
              StyleBox["C", Italic, 14, StripOnInput -> False], 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["A", Italic, 14, StripOnInput -> False], "\")\"", 
              "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"O\"", 14, StripOnInput -> False], 
                  StyleBox["\"R \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["B", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["D", Italic, 14, StripOnInput -> False], "\")\"", 
              "\")\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {"text" -> "\[Not]expr is the logical NOT function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Not.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NOT.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "e_1 \[And] e_2 \[And] ... is the logical AND function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/And.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AND.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "e_1 \[Or] e_2 \[Or] ... is the logical OR function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Or.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/OR.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Minimal forms", "scanner" -> "Boolean", "id" -> 
     "MinimalForms", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"DNF\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"CNF\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Or]", 
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Or]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[Or]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["C", Italic, 14, StripOnInput -> False], "\[Or]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"ANF\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["C", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[Xor]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"NOR\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Nor]", 
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Nor]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Nor]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Nor]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[Nor]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Nor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["C", Italic, 14, StripOnInput -> False], 
                    "\[Nor]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"NAND\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Nand]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Nand]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[Nand]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"AND\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"OR\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], "\[Or]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], "\[Or]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}},
                    GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming NOR is an n\[Hyphen]ary operator\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Text notation", "input" -> 
         "MinimalForms__Text notation"}, {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {
        "text" -> "e_1 \[Xor] e_2 \[Xor] ... is the logical XOR function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Xor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/XOR.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "e_1 \[Nor] e_2 \[Nor] ... is the logical NOR function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Nor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NOR.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> 
         "e_1 \[Nand] e_2 \[Nand] ... is the logical NAND function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Nand.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NAND.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Other forms", "scanner" -> "Boolean", "id" -> 
     "OtherForms", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"ESOP\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"IMPLIES\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[Implies]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[Implies]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], ")"}], "\[Implies]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Implies]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    "\[Implies]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[Implies]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}]}], ")"}]}]}], ")"}]}]}], 11, SpanMaxSize -> 0, 
                  StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"ITE\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], ")"}]}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["C", Italic, 14, StripOnInput -> False], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["D", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], ")"}]}]}], ")"}]}], ")"}]}], ")"}]}], 11, 
                  SpanMaxSize -> 0, StripOnInput -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Text notation", "input" -> 
         "OtherForms__Text notation"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> 
         "p implies q represents the logical implication \
p\[DoubleRightArrow]q"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Implies.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Implies.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Logic circuit", "scanner" -> "Boolean", "id" -> 
     "LogicCircuit", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{
                
                LineBox[{{2.4468904221496253`, 1.249038105676658}, {
                 2.5193084151781933`, 1.249038105676658}}], 
                
                LineBox[{{2.4468904221496253`, 1.349038105676658}, {
                 2.5193084151781933`, 1.349038105676658}}], 
                
                CircleBox[{2.295704632945934, 1.299038105676658}, {
                 0.22677868380553634`, 0.3}, 
                 NCache[{2 Pi - ArcSin[
                    Rational[1, 3]], 2 Pi + ArcSin[
                    Rational[1, 3]]}, {5.943348397725464, 
                  6.623022216633708}]], 
                
                CircleBox[{2.49831445411779, 1.516996105676658}, {
                 0.24061520723345814`, 
                 0.31830400000000003`}, {-1.52424, -0.7542}], 
                
                CircleBox[{2.49829359047888, 1.081038105676658}, {
                 0.24061520723345814`, 0.31830400000000003`}, {0.75426, 
                 1.52424}], 
                
                LineBox[{{2.6736691059551614`, 1.299038105676658}, {
                 2.7492620005570068`, 1.299038105676658}}]}, {
                
                LineBox[{{1.5808650183651862`, 2.1150635094610966`}, {
                 1.6564579129670318`, 2.1150635094610966`}, {
                 1.6564579129670318`, 2.0650635094610963`}, {
                 1.7320508075688772`, 2.0650635094610963`}}], 
                
                LineBox[{{1.5808650183651862`, 2.215063509461096}, {
                 1.6564579129670318`, 2.215063509461096}, {
                 1.6564579129670318`, 2.2650635094610965`}, {
                 1.7320508075688772`, 2.2650635094610965`}}], 
                
                CircleBox[{1.7320508075688772`, 2.1650635094610964`}, {
                 0.07559289460184544, 0.1}, 
                 
                 NCache[{Rational[3, 2] Pi, Rational[5, 2] Pi}, {
                  4.71238898038469, 7.853981633974483}]], 
                
                LineBox[{{1.6564579129670318`, 2.1150635094610966`}, {
                 1.6564579129670318`, 2.215063509461096}}], 
                
                LineBox[{{1.8076437021707226`, 2.1650635094610964`}, {
                 1.8832365967725682`, 2.1650635094610964`}}]}, {
                
                LineBox[{{0.9869740351473913, 2.598076211353316}, {
                 1.0172111929881296`, 2.598076211353316}}], 
                InsetBox[
                 FormBox[
                  TagBox["C", HoldForm], TraditionalForm], {
                 0.8660254037844386, 2.598076211353316}]}, {
                
                LineBox[{{0.7148396145807477, 1.7320508075688772`}, {
                 0.7623119523907067, 1.7320508075688772`}}], 
                
                LineBox[{{0.9264997194659149, 1.7320508075688772`}, {
                 0.7623119523907067, 1.632050807568877}, {0.7623119523907067, 
                 1.8320508075688773`}, {0.9264997194659149, 
                 1.7320508075688772`}}], 
                
                CircleBox[{0.9567368773066531, 1.7320508075688772`}, {
                 0.030237157840738178`, 0.04}], 
                
                LineBox[{{0.9869740351473913, 1.7320508075688772`}, {
                 1.0172111929881296`, 1.7320508075688772`}}]}, {
                
                LineBox[{{0.12094863136295271`, 1.7320508075688772`}, {
                 0.15118578920369088`, 1.7320508075688772`}}], 
                InsetBox[
                 FormBox[
                  TagBox["A", HoldForm], TraditionalForm], {0., 
                 1.7320508075688772`}]}, {
                
                LineBox[{{1.5808650183651864`, 0.3830127018922192}, {
                 1.656457912967032, 0.3830127018922192}, {1.656457912967032, 
                 0.3330127018922192}, {1.7320508075688774`, 
                 0.3330127018922192}}], 
                
                LineBox[{{1.5808650183651864`, 0.4830127018922192}, {
                 1.656457912967032, 0.4830127018922192}, {1.656457912967032, 
                 0.5330127018922192}, {1.7320508075688774`, 
                 0.5330127018922192}}], 
                
                CircleBox[{1.7320508075688774`, 0.4330127018922192}, {
                 0.07559289460184544, 0.1}, 
                 
                 NCache[{Rational[3, 2] Pi, Rational[5, 2] Pi}, {
                  4.71238898038469, 7.853981633974483}]], 
                
                LineBox[{{1.656457912967032, 0.3830127018922192}, {
                 1.656457912967032, 0.4830127018922192}}], 
                
                LineBox[{{1.8076437021707228`, 0.4330127018922192}, {
                 1.8832365967725684`, 0.4330127018922192}}]}, {
                
                LineBox[{{0.714839614580748, 0.8660254037844386}, {
                 0.7623119523907069, 0.8660254037844386}}], 
                
                LineBox[{{0.9264997194659151, 0.8660254037844386}, {
                 0.7623119523907069, 0.7660254037844386}, {0.7623119523907069,
                  0.9660254037844386}, {0.9264997194659151, 
                 0.8660254037844386}}], 
                
                CircleBox[{0.9567368773066534, 0.8660254037844386}, {
                 0.030237157840738178`, 0.04}], 
                
                LineBox[{{0.9869740351473916, 0.8660254037844386}, {
                 1.0172111929881298`, 0.8660254037844386}}]}, {
                LineBox[{{0.12094863136295271`, 0.8660254037844386}, {
                 0.15118578920369088`, 0.8660254037844386}}], 
                InsetBox[
                 FormBox[
                  TagBox["B", HoldForm], TraditionalForm], {0., 
                 0.8660254037844386}]}, {
                LineBox[{{0.714839614580748, 0.}, {0.7623119523907069, 0.}}], 
                
                
                LineBox[{{0.9264997194659151, 0.}, {
                 0.7623119523907069, -0.1}, {0.7623119523907069, 0.1}, {
                 0.9264997194659151, 0.}}], 
                
                CircleBox[{0.9567368773066534, 0.}, {0.030237157840738178`, 
                 0.04}], 
                
                LineBox[{{0.9869740351473916, 0.}, {1.0172111929881298`, 
                 0.}}]}, {
                
                LineBox[{{0.12094863136295271`, 0.}, {0.15118578920369088`, 
                 0.}}], 
                InsetBox[
                 FormBox[
                  TagBox["D", HoldForm], TraditionalForm], {0., 0.}]}}, {
               
               LineBox[{{{2.4468904221496253`, 1.249038105676658}, {
                1.8832365967725684`, 0.4330127018922192}}, {{
                2.4468904221496253`, 1.349038105676658}, {1.8832365967725682`,
                 2.1650635094610964`}}}], 
               
               LineBox[{{{1.5808650183651862`, 2.1150635094610966`}, {
                1.0172111929881296`, 1.7320508075688772`}}, {{
                1.5808650183651862`, 2.215063509461096}, {1.0172111929881296`,
                 2.598076211353316}}}], {}, 
               
               LineBox[{{0.7148396145807477, 1.7320508075688772`}, {
                0.15118578920369088`, 1.7320508075688772`}}], {}, 
               
               LineBox[{{{1.5808650183651864`, 0.3830127018922192}, {
                1.0172111929881298`, 0.}}, {{1.5808650183651864`, 
                0.4830127018922192}, {1.0172111929881298`, 
                0.8660254037844386}}}], 
               
               LineBox[{{0.714839614580748, 0.8660254037844386}, {
                0.15118578920369088`, 0.8660254037844386}}], {}, 
               
               LineBox[{{0.714839614580748, 0.}, {0.15118578920369088`, 
                0.}}], {}}}, AspectRatio -> 0.7559289460184544, ImageSize -> 
             NCache[
               Rational[550, 3], 183.33333333333334`]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Venn diagram", "scanner" -> "SetTheory", "id" -> 
     "VennDiagram", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{
                GrayLevel[1], 
                PolygonBox[CompressedData["
1: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
Ey9uTQLdjF3WeTWV4Pfc6s+s1X/lf3dT5ko=
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
Kupfe4DHk/8BUiIQPg==
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
tf8rszzCcOFwJP4PcaQtkg==
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1:eJwVlnk0Fdr7xmWoDA0ocSmaNZhTSrVNyVQkXVFKIRQqSUgoUlHJFCmRUpLq
Ii6q+1RmDs6Acw5nPk7JD400Kd/z++Nde33Wu/da7x/P++xn4cGj7gGyMjIy
FGn9/7lyvXbdAbsG8h/vVPy7MRqCKK8MOL8bSeevlTserKDjP5WG34MVzSQv
8U+GgjcdA+1Foj1+rcTJ6MS+38l0JPWYqCjOaieyfhuWpvxDx6DjjGWNVRTy
0LOs/EEvHSFHJ/YEeHaSSEfz5e4/pJzssA9fusjUwlrZZE0GnmjKVXo0UonK
1E9/Wa1hwCahROf3FRoxDKwpPOPCgMjrRU7DTjppa/fW3XiAgUvitL9yNBgk
VpkWGx3OQEHY0kHfXgY55/r9h1kCA0fcjDNmZnaTwf0wPZzCwE22yq/LLj2k
qNppgXY6A7cX/uPZKttLxj1mzbLPYkByIs2kvKqXFO4eqBjKZMDCID7INIBJ
yrcrqyteY+Aw++IaS1UWSbI1yrpzkYFY35rldbUs0pTmPf7sDAMyGgKj2/vY
5Jaf2MPuKAMVp3fm9k6yyYiq67IdPgyMp+Qq78zvI8ULVm/kbmUg2mtWtty6
ftKlLn4zZMjA9ZG0IhalnwQsirOOVWNgTPOPQv0+DjmcFXgj6zMdm40Z45XD
HDKhoTt1XRcdy6Ly1fMjuUR2QKITWEIHR++k37EJLuExDlD04+iYXnrIUy+O
R+74rtub4EaHaiq9veAXj4zeywsJ15X2f71WFEXwidZB5pjc/9Gg/q9xS997
PnHSom7dUEnD3/RiDWIgIN/tIhS1o2iYo0kP9PUTkLJXBhZl62nQX1LW75wj
ILdDtyz/+o2KrSE5RhMtAnJ6CYn/UUEF1b3bO+S7gKyVN9hUf5gKpxrZtJyl
QjLH+Gf5bl0qhEW3LaLdhKRgvrdc4p0ueH6InFSJFhL2Rpstyn86YT85v3l7
gZAMCo7Vent0wtnL4+mGeiGhNSumn7vXgVDj0DkdA0KS70+/lTVKQVBLWZqs
vIhs6fBzvmtKgcfjwm9MPRG59Mjlwetj7WBXHfd1shSRub6Ld8k9bMPJZiMd
z50isij1YnpsfyvW75r3/FeQiDQY/GVkM70VKhlU5bWxIhKU65kVbNQCumuJ
tvwVEWHti6ydvqMZi319nqhKWePCy+PaUk6Y99hK8FZEkkppC05cb8Xgthju
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
79qmP07D/wB9P/my
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
1/9Kb/IXIabxhsImf/0P4/AWoA==
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
pmjLs6rh19fp3Tsjt3YQyKUuiQVcmJgo2Wj+2YZn64t1iUlcRH35t6z9QBu0
0oM4ZyO4EH/g3TGX3Qori0dfx3y5EPCade9ab8HE1mjt7fz+5OeF3NRzbUHK
lEaUsgUXH10Txiz6H2Mk6gfJ90ZcuJVrm27Ufgw5n4j563v5+dBYD7xSyfjz
qalJvzwX0oMpA4GfmkFSlpZgCfPjpw6mKv7SjMig/vDaRQ6Onbr9MpjSBIHx
ksJTExzEv1byDNrdBLfw/WmkYQ6EN+VpbItphFqsVQClnYPV9z8ver5rgDBN
3ya/goPSTcoFbmYNqPoWaP1jBge3BIgi4pX1GBJ/E1cWxb+v7k9Ff91Uj2k3
iuxzX358xf1fnozXIrA0XobiyEFln2iSShZ/n4ap5vqe5OC6hXnEhEM1Zv07
Byf28/V/yMd9lX+EDP6sblPgoNXGwyOS9hAulHNZsqIcFC1IMS5nViL84jmf
8QU2AllPcqrOVYAV4OjsyGZjVVfEmyhTjvBW/biiXjYELh7YGDxSiqllcbGa
Or6/NFh/+Y8SEB87CkXmsGFDflY3aVaMu4Q3qd/H8tl42fiE4AOMTPWO+/my
McojHFQOJ0Fp/upcoj0bShbzqqQP+TCzqfoUeJSNiaakPiGXXEzJ3P5+hzob
urf6K23Hs/G3kIN7vBRfHzdrf+9UJgpTJzdTVlhIsWkhdpLT+O+GwV7yaxaO
rQacmiCkQFCNxA7m/7+KmuMtVtQS8B/VP0qk
                 "]]}}, 
              GrayLevel[0], 
              Opacity[0.35], {
               GeometricTransformationBox[
                
                CircleBox[{-0.16966226687689306`, 0.23765250934545987`}, {
                 0.346, 0.864}], {{{
                 0.5295731185031725, -0.8482642938134464}, {
                 0.8482642938134464, 0.5295731185031725}}, {
                 0.12177844689834066`, 0.25571657185039653`}}], 
               GeometricTransformationBox[
                
                CircleBox[{-0.23765250934545987`, -0.16966226687689306`}, {
                 0.346, 0.864}], {{{
                 0.16464507364397662`, -0.9863528778914621}, {
                 0.9863528778914621, 
                 0.16464507364397662`}}, {-0.3658710596462135, 
                 0.09268102607867895}}], 
               GeometricTransformationBox[
                
                CircleBox[{0.16966226687689304`, -0.23765250934545992`}, {
                 0.346, 0.864}], {{{-0.22534869116620548`, \
-0.9742781776216063}, {
                 0.9742781776216063, -0.22534869116620548`}}, \
{-0.023644217054404115`, -0.45650543546279365`}}], 
               GeometricTransformationBox[
                
                CircleBox[{0.23765250934545992`, 0.16966226687689304`}, {
                 0.346, 0.864}], {{{-0.5810351605373051, \
-0.8138784566625339}, {0.8138784566625339, -0.5810351605373051}}, {
                 0.5138214371847253, 0.07482175182077035}}]}, {
               InsetBox[
                FormBox["D", TraditionalForm], {-0.6826925117752654, 
                0.5579383314161785}], 
               InsetBox[
                FormBox[
                "C", TraditionalForm], {-0.8341987298942162, \
-0.070084926337016}], 
               InsetBox[
                FormBox["B", TraditionalForm], {
                0.7589057087024405, -0.10136162092813886`}], 
               InsetBox[
                FormBox["A", TraditionalForm], {0.7298861999349604, 
                0.5210723319698551}]}}, Background -> 
             RGBColor[1, 0.932, 0.821], ImageSize -> 185, 
             PlotRange -> {{-1.242, 1.165}, {-0.728, 0.882}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Truth density", "scanner" -> "Boolean", "id" -> 
     "TruthDensity", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["7", "16"], "=", 
               TemplateBox[{"43.75`", "\"%\""}, "RowDefault"]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Boolean operator number", "scanner" -> "Boolean", "id" -> 
     "BooleanOperatorNumber", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FromDigits[Boole[BooleanTable[(C &&  !A) || ( !B &&  !D), {C, A, B, \
D}]], 2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"7953", 
              StyleBox["\" with variable ordering \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox[
               RowBox[{"{", 
                 RowBox[{"C", ",", "A", ",", "B", ",", "D"}], "}"}], 
               GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "7", "datatypes" -> 
    "Math", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.193", 
    "parsetiming" -> "0.539", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP30671735ig0g04a9d73h000032ca8314hg7a28c4", "host" -> 
    "https://www4d.wolframalpha.com", "server" -> "29", "related" -> 
    "https://www4d.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa30681735ig0g04a9d73h00001ef5a38f1fi6c6ch4427725388962737750", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2019, 10, 24, 19, 36, 52.554818`8.473187511419047}, "Line" -> 
    21, "SessionID" -> 17603872947736142644}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "(C and not A) or ( not B and  not D)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1373., {558., 563.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.780923812672262*^9},ExpressionUUID->"fdf50d56-ae17-4d79-8bfc-\
95461023793c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
   "not", " ", "A", " ", "and", " ", "not", " ", "B", " ", "and", " ", "not", 
    " ", "C", " ", "and", " ", "not", " ", "D"}], ")"}], " ", "or", " ", 
  RowBox[{"(", 
   RowBox[{
   "not", " ", "A", " ", "and", " ", "not", " ", "B", " ", "and", " ", "C", 
    " ", "and", " ", "not", " ", "D"}], ")"}], " ", "or", " ", 
  RowBox[{"(", 
   RowBox[{
   "not", " ", "A", " ", "and", " ", "not", " ", "B", " ", "and", " ", "C", 
    " ", "and", " ", "D"}], ")"}], " ", "or", " ", 
  RowBox[{"(", 
   RowBox[{
   "not", " ", "A", " ", "and", " ", "B", " ", "and", " ", "C", " ", "and", 
    " ", "not", " ", "D"}], ")"}], " ", "or", " ", 
  RowBox[{"(", 
   RowBox[{
   "not", " ", "A", " ", "and", " ", "B", " ", "and", " ", "C", " ", "and", 
    " ", "D"}], ")"}], " ", "or", " ", 
  RowBox[{"(", 
   RowBox[{
   "A", " ", "and", " ", "not", " ", "B", " ", "and", " ", "not", " ", "C", 
    " ", "and", " ", "not", " ", "D"}], ")"}], " ", "or", " ", 
  RowBox[{"(", 
   RowBox[{
   "A", " ", "and", " ", "not", " ", "B", " ", "and", " ", "C", " ", "and", 
    " ", "not", " ", "D"}], ")"}]}]], "Input",
 CellChangeTimes->{3.7809239589547567`*^9},
 NumberMarks->False,ExpressionUUID->"a744c519-f309-4d0c-832c-fc17e68bfb64"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.780923719709394*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"0e208c30-f5c8-441f-a906-4d830b06ef07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b", ",", "d", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\:0441", "&&", 
          RowBox[{"!", "a"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "b"}], "&&", 
          RowBox[{"!", "d"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b", ",", "d"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\:0441", ",", "a", ",", "b", ",", "d", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\:0441", "&&", 
           RowBox[{"!", "a"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "b"}], "&&", 
           RowBox[{"!", "d"}]}], ")"}]}]}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.780923428889965*^9, 3.780923431252968*^9}, {
  3.7809234617622347`*^9, 3.780923479957139*^9}},
 NumberMarks->False,
 CellLabel->"In[11]:=",ExpressionUUID->"82bfaa09-9990-4cf1-b34e-0ead9bc2d692"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\:0441",
       HoldForm], 
      TagBox["a",
       HoldForm], 
      TagBox["b",
       HoldForm], 
      TagBox["d",
       HoldForm], 
      TagBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\:0441", "&&", 
          RowBox[{"!", "a"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "b"}], "&&", 
          RowBox[{"!", "d"}]}], ")"}]}],
       HoldForm]},
     {"True", "True", "True", "True", "False"},
     {"True", "True", "True", "False", "False"},
     {"True", "True", "False", "True", "False"},
     {"True", "True", "False", "False", "True"},
     {"True", "False", "True", "True", "True"},
     {"True", "False", "True", "False", "True"},
     {"True", "False", "False", "True", "True"},
     {"True", "False", "False", "False", "True"},
     {"False", "True", "True", "True", "False"},
     {"False", "True", "True", "False", "False"},
     {"False", "True", "False", "True", "False"},
     {"False", "True", "False", "False", "True"},
     {"False", "False", "True", "True", "False"},
     {"False", "False", "True", "False", "False"},
     {"False", "False", "False", "True", "False"},
     {"False", "False", "False", "False", "True"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {$CellContext`\:0441, $CellContext`a, $CellContext`b, \
$CellContext`d, 
       Or[
        And[$CellContext`\:0441, 
         Not[$CellContext`a]], 
        And[
         Not[$CellContext`b], 
         Not[$CellContext`d]]]}}]]]], "Output",
 CellChangeTimes->{3.780923357704403*^9, 3.780923448625514*^9, 
  3.780923505333709*^9},
 CellLabel->
  "Out[11]//TableForm=",ExpressionUUID->"61b64f3f-83c9-4800-9b4c-\
1a749c5c8686"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"\[Not]", "a"}], "\[And]", " ", 
    RowBox[{"\[Not]", "b"}], " ", "\[And]", 
    RowBox[{"\[Not]", " ", "\:0441"}], " ", "\[And]", 
    RowBox[{"\[Not]", "d"}]}], ")"}], "\[Or]", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"\[Not]", "a"}], " ", "\[And]", " ", 
    RowBox[{"\[Not]", "b"}], "\[And]", " ", "\:0441", "\[And]", 
    RowBox[{"\[Not]", "d"}]}], ")"}], "\[Or]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"\[Not]", "a"}], "\[And]", 
    RowBox[{"\[Not]", "b"}], "\[And]", "\:0441", "\[And]", "d"}], ")"}], " ", 
  "\[Or]", " ", 
  RowBox[{"(", " ", 
   RowBox[{
    RowBox[{"\[Not]", "a"}], " ", "\[And]", "  ", "b", "\[And]", "  ", 
    "\:0441", "\[And]", " ", 
    RowBox[{"\[Not]", "d"}]}], ")"}], " ", "\[Or]", " ", 
  RowBox[{"(", " ", 
   RowBox[{
    RowBox[{"\[Not]", "a"}], " ", "\[And]", "  ", "b", "\[And]", "  ", 
    "\:0441", "\[And]", "d"}], ")"}], "\[Or]", " ", 
  RowBox[{"(", " ", 
   RowBox[{"a", " ", "\[And]", "  ", 
    RowBox[{"\[Not]", "b"}], "\[And]", " ", 
    RowBox[{"\[Not]", " ", "\:0441"}], "\[And]", 
    RowBox[{"\[Not]", "d"}]}], ")"}], " ", "\[Or]", 
  RowBox[{"(", 
   RowBox[{"a", " ", "\[And]", "  ", 
    RowBox[{"\[Not]", "b"}], "\[And]", "  ", "\:0441", "\[And]", 
    RowBox[{"\[Not]", "d"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.780923662728951*^9, 3.780923663176086*^9}},
 NumberMarks->False,
 CellLabel->"In[14]:=",ExpressionUUID->"fa744657-f00d-48f6-9256-e689966f17ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "a"}], "&&", 
    RowBox[{"!", "b"}], "&&", 
    RowBox[{"!", "\:0441"}], "&&", 
    RowBox[{"!", "d"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "a"}], "&&", 
    RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
    RowBox[{"!", "d"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "a"}], "&&", 
    RowBox[{"!", "b"}], "&&", "\:0441", "&&", "d"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", 
    RowBox[{"!", "d"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", "d"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"a", "&&", 
    RowBox[{"!", "b"}], "&&", 
    RowBox[{"!", "\:0441"}], "&&", 
    RowBox[{"!", "d"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"a", "&&", 
    RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
    RowBox[{"!", "d"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.780923401855899*^9, 3.7809235094512377`*^9, 
  3.780923663778346*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"a676fd78-d64b-4623-b4e0-9e1da21850b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b", ",", "d", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", 
          RowBox[{"!", "b"}], "&&", 
          RowBox[{"!", "\:0441"}], "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", 
          RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", 
          RowBox[{"!", "b"}], "&&", "\:0441", "&&", "d"}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", "d"}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"a", "&&", 
          RowBox[{"!", "b"}], "&&", 
          RowBox[{"!", "\:0441"}], "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"a", "&&", 
          RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
          RowBox[{"!", "d"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b", ",", "d"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\:0441", ",", "a", ",", "b", ",", "d", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "a"}], "&&", 
           RowBox[{"!", "b"}], "&&", 
           RowBox[{"!", "\:0441"}], "&&", 
           RowBox[{"!", "d"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "a"}], "&&", 
           RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
           RowBox[{"!", "d"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "a"}], "&&", 
           RowBox[{"!", "b"}], "&&", "\:0441", "&&", "d"}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", 
           RowBox[{"!", "d"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", "d"}], ")"}], 
         "||", 
         RowBox[{"(", 
          RowBox[{"a", "&&", 
           RowBox[{"!", "b"}], "&&", 
           RowBox[{"!", "\:0441"}], "&&", 
           RowBox[{"!", "d"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{"a", "&&", 
           RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
           RowBox[{"!", "d"}]}], ")"}]}]}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[15]:=",ExpressionUUID->"559f3701-540c-4478-8008-e0207762f36d"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\:0441",
       HoldForm], 
      TagBox["a",
       HoldForm], 
      TagBox["b",
       HoldForm], 
      TagBox["d",
       HoldForm], 
      TagBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", 
          RowBox[{"!", "b"}], "&&", 
          RowBox[{"!", "\:0441"}], "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", 
          RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", 
          RowBox[{"!", "b"}], "&&", "\:0441", "&&", "d"}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", "b", "&&", "\:0441", "&&", "d"}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"a", "&&", 
          RowBox[{"!", "b"}], "&&", 
          RowBox[{"!", "\:0441"}], "&&", 
          RowBox[{"!", "d"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"a", "&&", 
          RowBox[{"!", "b"}], "&&", "\:0441", "&&", 
          RowBox[{"!", "d"}]}], ")"}]}],
       HoldForm]},
     {"True", "True", "True", "True", "False"},
     {"True", "True", "True", "False", "False"},
     {"True", "True", "False", "True", "False"},
     {"True", "True", "False", "False", "True"},
     {"True", "False", "True", "True", "True"},
     {"True", "False", "True", "False", "True"},
     {"True", "False", "False", "True", "True"},
     {"True", "False", "False", "False", "True"},
     {"False", "True", "True", "True", "False"},
     {"False", "True", "True", "False", "False"},
     {"False", "True", "False", "True", "False"},
     {"False", "True", "False", "False", "True"},
     {"False", "False", "True", "True", "False"},
     {"False", "False", "True", "False", "False"},
     {"False", "False", "False", "True", "False"},
     {"False", "False", "False", "False", "True"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {$CellContext`\:0441, $CellContext`a, $CellContext`b, \
$CellContext`d, 
       Or[
        And[
         Not[$CellContext`a], 
         Not[$CellContext`b], 
         Not[$CellContext`\:0441], 
         Not[$CellContext`d]], 
        And[
         Not[$CellContext`a], 
         Not[$CellContext`b], $CellContext`\:0441, 
         Not[$CellContext`d]], 
        And[
         Not[$CellContext`a], 
         Not[$CellContext`b], $CellContext`\:0441, $CellContext`d], 
        And[
         Not[$CellContext`a], $CellContext`b, $CellContext`\:0441, 
         Not[$CellContext`d]], 
        And[
         Not[$CellContext`a], $CellContext`b, $CellContext`\:0441, \
$CellContext`d], 
        And[$CellContext`a, 
         Not[$CellContext`b], 
         Not[$CellContext`\:0441], 
         Not[$CellContext`d]], 
        And[$CellContext`a, 
         Not[$CellContext`b], $CellContext`\:0441, 
         Not[$CellContext`d]]]}}]]]], "Output",
 CellChangeTimes->{3.780923666843212*^9},
 CellLabel->
  "Out[15]//TableForm=",ExpressionUUID->"abb583d9-67b5-4d12-ae83-\
39a4769a6481"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", "%3", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[13]:=",ExpressionUUID->"010dbcc7-f7b1-4ec3-aa24-6e5a1b884861"],

Cell[BoxData[
 TagBox[GridBox[{
    {"1", "1", "1", "1", "0"},
    {"1", "1", "1", "0", "0"},
    {"1", "1", "0", "1", "0"},
    {"1", "1", "0", "0", "1"},
    {"1", "0", "1", "1", "1"},
    {"1", "0", "1", "0", "1"},
    {"1", "0", "0", "1", "1"},
    {"1", "0", "0", "0", "1"},
    {"0", "1", "1", "1", "0"},
    {"0", "1", "1", "0", "0"},
    {"0", "1", "0", "1", "0"},
    {"0", "1", "0", "0", "1"},
    {"0", "0", "1", "1", "0"},
    {"0", "0", "1", "0", "0"},
    {"0", "0", "0", "1", "0"},
    {"0", "0", "0", "0", "1"}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.780923406193597*^9, 3.780923513278998*^9},
 CellLabel->
  "Out[13]//TableForm=",ExpressionUUID->"f0dc836d-dabd-42ed-8dec-\
6f6ac095e5e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], " ", "\[And]", " ", "b", "\[And]", " ", 
     "\:0441"}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], "\[And]", "b", "\[And]", 
     RowBox[{"\[Not]", "\:0441"}]}], ")"}]}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.780754337647855*^9, 3.780754352177238*^9}, 
   3.780754395258368*^9},
 NumberMarks->False,
 CellLabel->"In[7]:=",ExpressionUUID->"ac64d18b-6dd1-4a40-b547-c39142d404ef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"!", "a"}], "&&", "b"}]], "Output",
 CellChangeTimes->{
  3.7807537292600813`*^9, {3.780754344172626*^9, 3.780754352658038*^9}, {
   3.780754396146552*^9, 3.780754399444405*^9}},
 CellLabel->"Out[7]=",ExpressionUUID->"d15109ae-2b47-4c8c-a09f-268474ece631"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogicalExpand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"\:0441", "&&", 
     RowBox[{"!", "a"}]}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "\:0441"}], "&&", "a"}], ")"}], "||", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"!", "a"}], "&&", "b"}], ")"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[6]:=",ExpressionUUID->"a98a514f-5950-4b55-aab6-98bf11950cda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"\:0441", "&&", 
    RowBox[{"!", "a"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"a", "&&", 
    RowBox[{"!", "\:0441"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"b", "&&", 
    RowBox[{"!", "a"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.780753708075029*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"5df90f04-80f1-4041-9b73-aa0aa034494c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\:0441", "&&", 
          RowBox[{"!", "a"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"a", "&&", 
          RowBox[{"!", "\:0441"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"b", "&&", 
          RowBox[{"!", "a"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\:0441", ",", "a", ",", "b", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\:0441", "&&", 
           RowBox[{"!", "a"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{"a", "&&", 
           RowBox[{"!", "\:0441"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{"b", "&&", 
           RowBox[{"!", "a"}]}], ")"}]}]}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[7]:=",ExpressionUUID->"76a6084f-b0ae-45c4-ab47-8acbff7ba21a"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\:0441",
       HoldForm], 
      TagBox["a",
       HoldForm], 
      TagBox["b",
       HoldForm], 
      TagBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\:0441", "&&", 
          RowBox[{"!", "a"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"a", "&&", 
          RowBox[{"!", "\:0441"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{"b", "&&", 
          RowBox[{"!", "a"}]}], ")"}]}],
       HoldForm]},
     {"True", "True", "True", "False"},
     {"True", "True", "False", "False"},
     {"True", "False", "True", "True"},
     {"True", "False", "False", "True"},
     {"False", "True", "True", "True"},
     {"False", "True", "False", "True"},
     {"False", "False", "True", "True"},
     {"False", "False", "False", "False"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {$CellContext`\:0441, $CellContext`a, $CellContext`b, 
       Or[
        And[$CellContext`\:0441, 
         Not[$CellContext`a]], 
        And[$CellContext`a, 
         Not[$CellContext`\:0441]], 
        And[$CellContext`b, 
         Not[$CellContext`a]]]}}]]]], "Output",
 CellChangeTimes->{3.780753713075273*^9},
 CellLabel->
  "Out[7]//TableForm=",ExpressionUUID->"f1c5b1c5-faf6-4707-963d-908c3b25ea0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["A or B", "WolframAlphaLong",
 CellChangeTimes->{{3.780751101250258*^9, 3.780751105674065*^9}, 
   3.780753690974881*^9, {3.780753994314795*^9, 3.780754121085574*^9}, 
   3.780754411380064*^9, {3.780890445620706*^9, 3.780890486866879*^9}, {
   3.780890971589582*^9, 3.780890985556179*^9}, {3.78089119505357*^9, 
   3.780891202366798*^9}, {3.780891317754847*^9, 3.78089133484651*^9}, {
   3.78089147505866*^9, 3.780891520416363*^9}, {3.780891631679597*^9, 
   3.7808916335655613`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"57f71df0-74e4-4ba4-9d9b-b51662bcdf97"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "A or B", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               RowBox[{"A", "\[Union]", "B"}], HoldForm], TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Venn diagram", "scanner" -> "SetTheory", "id" -> 
     "VennDiagram", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
                 
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
z9G4PWkwtrqyPra9F/8DUzLiXQ==
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
Z9Lvi204r551QJxOgTm/9/ct3W34HweLsh4=
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
stiA5vzCH99yXoD/AwcLkBU=
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
                 
                 "]]}, {
                RGBColor[1, 0.932, 0.821], 
                PolygonBox[CompressedData["
1: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
FJoJeLYpDtLxf3CgJR4=
                 "]]}}, 
              GrayLevel[0], 
              Opacity[0.35], {
               CircleBox[{-0.40270181275976397`, -0.2325}, 1], 
               CircleBox[{0.40270181275976397`, -0.2325}, 1]}, {
               InsetBox[
                FormBox["B", TraditionalForm], {1.008919595408871, -0.5825}], 
               
               InsetBox[
                FormBox[
                "A", TraditionalForm], {-1.008919595408871, -0.5825}]}}, 
             Background -> GrayLevel[1], 
             PlotRange -> {{-1.6, 1.6}, {-1.5, 1}}, ImageSize -> 185, 
             PlotRange -> {{-1.6, 1.6}, {-1.425, 1.658}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "or", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "EnglishWord", "desc" -> "a word", "input" -> 
          "*C.or-_*EnglishWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MathOperator", "desc" -> " referring to math", "input" -> 
          "*C.or-_*MathOperator-"}, {}]}]}]}, Typeset`initdone$$ = True, 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Union", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.65", 
    "parsetiming" -> "0.371", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP148551a2g74ega22iad9e000024223gdb1784hf61", "host" -> 
    "https://www5b.wolframalpha.com", "server" -> "28", "related" -> 
    "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa148561a2g74ega22iad9e0000496c7bacfe6gh06i3058145564852761731", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2019, 10, 24, 10, 40, 36.102715`8.310114842331865}, "Line" -> 
    7, "SessionID" -> 17603659399428716867}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "A or B"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {162., 168.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7808916361592293`*^9},ExpressionUUID->"f9b484b8-5e4c-46c2-9d47-\
19c84792d9e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\:0441", "&&", 
          RowBox[{"!", "a"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "\:0441"}], "&&", "a"}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", "b"}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\:0441", ",", "a", ",", "b"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\:0441", ",", "a", ",", "b", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\:0441", "&&", 
           RowBox[{"!", "a"}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "\:0441"}], "&&", "a"}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"!", "a"}], "&&", "b"}], ")"}]}]}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[65]:=",ExpressionUUID->"7acbab40-1454-4221-bc6a-2744cb0a6f3e"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\:0441",
       HoldForm], 
      TagBox["a",
       HoldForm], 
      TagBox["b",
       HoldForm], 
      TagBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\:0441", "&&", 
          RowBox[{"!", "a"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "\:0441"}], "&&", "a"}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", "b"}], ")"}]}],
       HoldForm]},
     {"True", "True", "True", "False"},
     {"True", "True", "False", "False"},
     {"True", "False", "True", "True"},
     {"True", "False", "False", "True"},
     {"False", "True", "True", "True"},
     {"False", "True", "False", "True"},
     {"False", "False", "True", "True"},
     {"False", "False", "False", "False"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {$CellContext`\:0441, $CellContext`a, $CellContext`b, 
       Or[
        And[$CellContext`\:0441, 
         Not[$CellContext`a]], 
        And[
         Not[$CellContext`\:0441], $CellContext`a], 
        And[
         Not[$CellContext`a], $CellContext`b]]}}]]]], "Output",
 CellChangeTimes->{3.7807509074974623`*^9},
 CellLabel->
  "Out[65]//TableForm=",ExpressionUUID->"f33b9bfa-0b89-443e-a639-\
d856387cf7f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "True", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True", ",", "True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True", ",", "False", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
   "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[68]:=",ExpressionUUID->"f251f30c-fee3-4377-84e6-5e032ea79856"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"True", "True", "True", "False"},
     {"True", "True", "False", "False"},
     {"True", "False", "True", "True"},
     {"True", "False", "False", "True"},
     {"False", "True", "True", "True"},
     {"False", "True", "False", "True"},
     {"False", "False", "True", "True"},
     {"False", "False", "False", "False"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.780750930504137*^9},
 CellLabel->
  "Out[68]//MatrixForm=",ExpressionUUID->"fe2e6560-b7d3-42da-8941-\
29f16e89000e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Boole", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "True", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False", ",", "False", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True", ",", "True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True", ",", "False", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False", ",", "True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False", ",", "False", ",", "False"}], "}"}]}], 
   "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[69]:=",ExpressionUUID->"9ea49e6a-b911-4e5d-ae0c-6e7381c983a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7807509354578657`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"0b93e379-7ab9-4b02-b237-521f399e68d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[70]:=",ExpressionUUID->"e3a68266-8656-4c55-9bbb-b48b5285a89d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "1", "0"},
     {"1", "1", "0", "0"},
     {"1", "0", "1", "1"},
     {"1", "0", "0", "1"},
     {"0", "1", "1", "1"},
     {"0", "1", "0", "1"},
     {"0", "0", "1", "1"},
     {"0", "0", "0", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.780750939071373*^9},
 CellLabel->
  "Out[70]//MatrixForm=",ExpressionUUID->"4b1e004e-4d7a-4a57-a091-\
f5b416a3d433"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.780750948936173*^9},
 NumberMarks->False,ExpressionUUID->"12a7d76b-15d2-4879-8119-da86b5bd728c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.780750922036327*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"b81f638c-413f-409b-b5a0-37ef51e46e3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.780750951252557*^9, 3.780750951629903*^9}},
 NumberMarks->False,ExpressionUUID->"d948eaaa-80d3-4df4-b5ff-d60f419a9bd8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
     "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7807509252864923`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"65cca746-bdc6-4171-a23b-7a753d803e4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.780750912941937*^9, 3.780750914269079*^9}},
 NumberMarks->False,ExpressionUUID->"ae3248fc-3f67-4e79-b48b-f5b22a81a038"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\:0441",
       HoldForm], 
      TagBox["a",
       HoldForm], 
      TagBox["b",
       HoldForm], 
      TagBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"\:0441", "&&", 
          RowBox[{"!", "a"}]}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "\:0441"}], "&&", "a"}], ")"}], "||", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"!", "a"}], "&&", "b"}], ")"}]}],
       HoldForm]},
     {"True", "True", "True", "False"},
     {"True", "True", "False", "False"},
     {"True", "False", "True", "True"},
     {"True", "False", "False", "True"},
     {"False", "True", "True", "True"},
     {"False", "True", "False", "True"},
     {"False", "False", "True", "True"},
     {"False", "False", "False", "False"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {$CellContext`\:0441, $CellContext`a, $CellContext`b, 
       Or[
        And[$CellContext`\:0441, 
         Not[$CellContext`a]], 
        And[
         Not[$CellContext`\:0441], $CellContext`a], 
        And[
         Not[$CellContext`a], $CellContext`b]]}}]]]], "Output",
 CellChangeTimes->{3.7807508411606083`*^9},
 CellLabel->
  "Out[63]//TableForm=",ExpressionUUID->"40458741-84ad-4f88-9044-\
1068af729f0f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.780750838916987*^9},
 NumberMarks->False,ExpressionUUID->"c6ff433e-6b6a-44c2-a3a4-486319d544e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"True", ",", "False", ",", "True"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.780750835680629*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"f1277f25-9103-4e1a-a350-c845038d4909"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.7807508330819807`*^9},
 NumberMarks->False,ExpressionUUID->"0685eb3d-c05a-4d62-b1f9-4b960a8eff47"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"\:0441", "&&", 
    RowBox[{"!", "a"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"a", "&&", 
    RowBox[{"!", "\:0441"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"b", "&&", 
    RowBox[{"!", "a"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.780750807406281*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"2f9b83f1-9780-4b48-b49c-a8f4d3b17d01"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.7807508311285257`*^9},
 NumberMarks->False,ExpressionUUID->"bc96d93d-9ccb-438a-ba46-23427d185bb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"\:0441", "&&", 
    RowBox[{"!", "a"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "\:0441"}], "&&", "a"}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"!", "a"}], "&&", "b"}], ")"}]}]], "Output",
 CellChangeTimes->{3.780750812241069*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"58753e8e-ca99-4cbb-bfa2-7ed9df961a64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.780750824405794*^9},
 NumberMarks->False,ExpressionUUID->"49aa96ce-6f79-4cf9-aa74-a3128cccc15e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\:0441", ",", "a", ",", "b"}], "}"}]], "Output",
 CellChangeTimes->{3.780750815794992*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"15f00c2b-8257-44a6-8fd3-87de5ab6cbf1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7807449048493567`*^9, 
  3.780744934525777*^9}},ExpressionUUID->"a8218f0b-d9e7-4ab5-8465-\
78a97078d10c"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["A", "5"], " ", 
  SuperscriptBox["and", "10"], " ", 
  SuperscriptBox["B", "5"], " ", 
  SuperscriptBox["C", "5"], " ", 
  SuperscriptBox["not", "8"], " ", 
  SuperscriptBox["or", "4"], " ", "simplify"}]], "Output",
 CellChangeTimes->{{3.780744917339416*^9, 3.780744920411104*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"b04c4674-4ae9-43fd-9675-0699b66d95c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.7807449251905117`*^9, {3.780750590231456*^9, 
   3.780750591324544*^9}},ExpressionUUID->"a963429d-bb73-4a2f-bafc-\
333c6430064a"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "simplify ((not A and not B and C) or (not A and B and not C) or (not A \
and B and C) or (A and not B and not C) or (A and B and not C))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[( !A &&  !B && C) || ( !A && B &&  !C) || ( !A && B && C) \
|| (A &&  !B &&  !C) || (A && B &&  !C)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"simplify\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "A"}], "\[And]", 
                    RowBox[{"\[Not]", "B"}], "\[And]", "C"}], ")"}], "\[Or]", 
                    
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "A"}], "\[And]", "B", "\[And]", 
                    RowBox[{"\[Not]", "C"}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "A"}], "\[And]", "B", "\[And]", "C"}], 
                    ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"A", "\[And]", 
                    RowBox[{"\[Not]", "B"}], "\[And]", 
                    RowBox[{"\[Not]", "C"}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"A", "\[And]", "B", "\[And]", 
                    RowBox[{"\[Not]", "C"}]}], ")"}]}], ScriptLevel -> 0, 
                    StripOnInput -> False]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[( !A &&  !B && C) || ( !A && B &&  !C) || ( !A && B && C) \
|| (A &&  !B &&  !C) || (A && B &&  !C)]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"(\"", "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["A", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["B", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], 
              StyleBox["C", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"O\"", 14, StripOnInput -> False], 
                  StyleBox["\"R \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["A", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], 
              StyleBox["B", Italic, 14, StripOnInput -> False], 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["C", Italic, 14, StripOnInput -> False], "\")\"", 
              "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"O\"", 14, StripOnInput -> False], 
                  StyleBox["\"R \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["A", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], 
              StyleBox["B", Italic, 14, StripOnInput -> False], 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], 
              StyleBox["C", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"O\"", 14, StripOnInput -> False], 
                  StyleBox["\"R \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              StyleBox["A", Italic, 14, StripOnInput -> False], 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["B", Italic, 14, StripOnInput -> False], "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["C", Italic, 14, StripOnInput -> False], "\")\"", 
              "\")\"", 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"O\"", 14, StripOnInput -> False], 
                  StyleBox["\"R \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              StyleBox["A", Italic, 14, StripOnInput -> False], 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], 
              StyleBox["B", Italic, 14, StripOnInput -> False], 
              TemplateBox[{"\" \"", 
                TemplateBox[{
                  StyleBox["\"A\"", 14, StripOnInput -> False], 
                  StyleBox["\"ND \"", 11, StripOnInput -> False]}, 
                 "RowDefault"], "\" \""}, "RowDefault"], "\"(\"", 
              TemplateBox[{
                StyleBox["\"N\"", 14, StripOnInput -> False], 
                StyleBox["\"OT \"", 11, StripOnInput -> False]}, 
               "RowDefault"], 
              StyleBox["C", Italic, 14, StripOnInput -> False], "\")\"", 
              "\")\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {"text" -> "\[Not]expr is the logical NOT function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Not.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NOT.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "e_1 \[And] e_2 \[And] ... is the logical AND function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/And.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AND.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "e_1 \[Or] e_2 \[Or] ... is the logical OR function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Or.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/OR.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Boolean", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[Not]", 
                RowBox[{"(", 
                  RowBox[{"A", "\[And]", "C"}], ")"}]}], "\[And]", 
              RowBox[{"(", 
                RowBox[{"A", "\[Or]", "B", "\[Or]", "C"}], ")"}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Minimal forms", "scanner" -> "Boolean", "id" -> 
     "MinimalForms", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"DNF\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"CNF\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Or]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], "\[Or]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], "\[Or]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"ANF\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[Xor]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[Xor]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 11, 
                    SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"NOR\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Nor]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Nor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[Nor]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[Nor]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"NAND\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[Nand]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Nand]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Nand]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Nand]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[Nand]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"AND\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], "\[And]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                    TagBox[
                    PaneBox[
                    "\"OR\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    StyleBox[
                    RowBox[{
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[Or]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], "\[Or]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], "\[Or]", 
                    RowBox[{"\[Not]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[Or]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}},
                    GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxBackground -> {"Columns" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming NAND and NOR are n\[Hyphen]ary operators\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "MinimalForms__More"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Text notation", "input" -> 
         "MinimalForms__Text notation"}, {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {
        "text" -> "e_1 \[Xor] e_2 \[Xor] ... is the logical XOR function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Xor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/XOR.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "e_1 \[Nor] e_2 \[Nor] ... is the logical NOR function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Nor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NOR.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> 
         "e_1 \[Nand] e_2 \[Nand] ... is the logical NAND function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Nand.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NAND.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Other forms", "scanner" -> "Boolean", "id" -> 
     "OtherForms", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "\"ESOP\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], ")"}],
                     "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["B", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Xor]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}]}], 11, SpanMaxSize -> 0, StripOnInput -> False]}, {
                 TagBox[
                  PaneBox[
                  "\"ITE\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox[
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["A", Italic, 14, StripOnInput -> False], 
                    "\[And]", 
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}]}], 
                    ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["A", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    RowBox[{"(", 
                    RowBox[{
                    StyleBox["C", Italic, 14, StripOnInput -> False], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", 
                    StyleBox["C", Italic, 14, StripOnInput -> False]}], 
                    "\[And]", 
                    StyleBox["B", Italic, 14, StripOnInput -> False]}], 
                    ")"}]}], ")"}]}], ")"}]}], 11, SpanMaxSize -> 0, 
                  StripOnInput -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Text notation", "input" -> 
         "OtherForms__Text notation"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Truth table", "scanner" -> "Boolean", "id" -> 
     "TruthTable", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "BooleanTable[( !A &&  !B && C) || ( !A && B &&  !C) || ( !A && B && \
C) || (A &&  !B &&  !C) || (A && B &&  !C), {A, B, C}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "A", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "B", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "C", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "A"}], "\[And]", 
                    RowBox[{"\[Not]", "B"}], "\[And]", "C"}], ")"}], "\[Or]", 
                    
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "A"}], "\[And]", "B", "\[And]", 
                    RowBox[{"\[Not]", "C"}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[Not]", "A"}], "\[And]", "B", "\[And]", "C"}], 
                    ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"A", "\[And]", 
                    RowBox[{"\[Not]", "B"}], "\[And]", 
                    RowBox[{"\[Not]", "C"}]}], ")"}], "\[Or]", 
                    RowBox[{"(", 
                    RowBox[{"A", "\[And]", "B", "\[And]", 
                    RowBox[{"\[Not]", "C"}]}], ")"}]}], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False]}, {
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False]}, {
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False]}, {
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False]}, {
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False]}, {
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False]}, {
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False], 
                 ItemBox["\"T\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[15, 16], 
                    Rational[225, 256]}], StripOnInput -> False]}, {
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False], 
                 ItemBox["\"F\"", Background -> RGBColor[{
                    Rational[255, 256], 
                    Rational[249, 256], 
                    Rational[237, 256]}], StripOnInput -> False]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, Left}, "Rows" -> {{Baseline}},
                  "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}, {1, 
                    4} -> {Center, Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Logic circuit", "scanner" -> "Boolean", "id" -> 
     "LogicCircuit", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{
                
                LineBox[{{1.3125393573086606`, 3.223950213427199}, {
                 1.3559282132570816`, 3.223950213427199}}], 
                
                LineBox[{{1.3125393573086606`, 3.3239502134271985`}, {
                 1.3559282132570816`, 3.3239502134271985`}}], 
                
                CircleBox[{1.2219571945770928`, 3.2739502134271987`}, {
                 0.13587324409735152`, 0.3}, 
                 NCache[{2 Pi - ArcSin[
                    Rational[1, 3]], 2 Pi + ArcSin[
                    Rational[1, 3]]}, {5.943348397725464, 
                  6.623022216633708}]], 
                
                CircleBox[{1.3433497929758507`, 3.4919082134271986`}, {
                 0.1441633236305446, 
                 0.31830400000000003`}, {-1.52424, -0.7542}], 
                
                CircleBox[{1.3433372926373937`, 3.0559502134271987`}, {
                 0.1441633236305446, 0.31830400000000003`}, {0.75426, 
                 1.52424}], 
                
                LineBox[{{1.4484126014060121`, 3.2739502134271987`}, {
                 1.493703682771796, 3.2739502134271987`}}]}, {
                
                LineBox[{{0.8448321839619177, 6.030193253507655}, {
                 0.8901232653277016, 6.030193253507655}, {0.8901232653277016, 
                 5.980193253507655}, {0.9354143466934854, 
                 5.980193253507655}}], 
                
                LineBox[{{0.8448321839619177, 6.130193253507654}, {
                 0.8901232653277016, 6.130193253507654}, {0.8901232653277016, 
                 6.180193253507654}, {0.9354143466934854, 
                 6.180193253507654}}], 
                
                CircleBox[{0.9354143466934854, 6.080193253507654}, {
                 0.04529108136578384, 0.1}, 
                 
                 NCache[{Rational[3, 2] Pi, Rational[5, 2] Pi}, {
                  4.71238898038469, 7.853981633974483}]], 
                
                LineBox[{{0.8901232653277016, 6.030193253507655}, {
                 0.8901232653277016, 6.130193253507654}}], 
                
                LineBox[{{0.9807054280592693, 6.080193253507654}, {
                 1.0259965094250532`, 6.080193253507654}}]}, {
                
                LineBox[{{0.37712501061517506`, 6.547900426854397}, {
                 0.4055678097128873, 6.547900426854397}}], 
                
                LineBox[{{0.5039400384393697, 6.547900426854397}, {
                 0.4055678097128873, 6.447900426854398}, {0.4055678097128873, 
                 6.647900426854397}, {0.5039400384393697, 
                 6.547900426854397}}], 
                
                CircleBox[{0.5220564709856833, 6.547900426854397}, {
                 0.018116432546313534`, 0.04}], 
                
                LineBox[{{0.5401729035319969, 6.547900426854397}, {
                 0.5582893360783104, 6.547900426854397}}]}, {
                
                LineBox[{{0.07246573018525414, 6.547900426854397}, {
                 0.09058216273156768, 6.547900426854397}}], 
                InsetBox[
                 FormBox[
                  TagBox["A", HoldForm], TraditionalForm], {0., 
                 6.547900426854397}]}, {
                
                LineBox[{{0.37712501061517506`, 6.080193253507654}, {
                 0.4055678097128873, 6.080193253507654}}], 
                
                LineBox[{{0.5039400384393697, 6.080193253507654}, {
                 0.4055678097128873, 5.980193253507655}, {0.4055678097128873, 
                 6.180193253507654}, {0.5039400384393697, 
                 6.080193253507654}}], 
                
                CircleBox[{0.5220564709856833, 6.080193253507654}, {
                 0.018116432546313534`, 0.04}], 
                
                LineBox[{{0.5401729035319969, 6.080193253507654}, {
                 0.5582893360783104, 6.080193253507654}}]}, {
                
                LineBox[{{0.07246573018525414, 6.080193253507654}, {
                 0.09058216273156768, 6.080193253507654}}], 
                InsetBox[
                 FormBox[
                  TagBox["B", HoldForm], TraditionalForm], {0., 
                 6.080193253507654}]}, {
                
                LineBox[{{0.540172903531997, 5.612486080160912}, {
                 0.5582893360783105, 5.612486080160912}}], 
                InsetBox[
                 FormBox[
                  TagBox["C", HoldForm], TraditionalForm], {
                 0.46770717334674283`, 5.612486080160912}]}, {
                
                LineBox[{{0.8448321839619177, 4.627071733467427}, {
                 0.8901232653277016, 4.627071733467427}, {0.8901232653277016, 
                 4.577071733467427}, {0.9354143466934854, 
                 4.577071733467427}}], 
                
                LineBox[{{0.8448321839619177, 4.727071733467427}, {
                 0.8901232653277016, 4.727071733467427}, {0.8901232653277016, 
                 4.777071733467427}, {0.9354143466934854, 
                 4.777071733467427}}], 
                
                CircleBox[{0.9354143466934854, 4.677071733467427}, {
                 0.04529108136578384, 0.1}, 
                 
                 NCache[{Rational[3, 2] Pi, Rational[5, 2] Pi}, {
                  4.71238898038469, 7.853981633974483}]], 
                
                LineBox[{{0.8901232653277016, 4.627071733467427}, {
                 0.8901232653277016, 4.727071733467427}}], 
                
                LineBox[{{0.9807054280592693, 4.677071733467427}, {
                 1.0259965094250532`, 4.677071733467427}}]}, {
                
                LineBox[{{0.37712501061517517`, 5.144778906814169}, {
                 0.4055678097128874, 5.144778906814169}}], 
                
                LineBox[{{0.5039400384393699, 5.144778906814169}, {
                 0.4055678097128874, 5.0447789068141695`}, {
                 0.4055678097128874, 5.244778906814169}, {0.5039400384393699, 
                 5.144778906814169}}], 
                
                CircleBox[{0.5220564709856834, 5.144778906814169}, {
                 0.018116432546313534`, 0.04}], 
                
                LineBox[{{0.540172903531997, 5.144778906814169}, {
                 0.5582893360783105, 5.144778906814169}}]}, {
                
                LineBox[{{0.07246573018525414, 5.144778906814169}, {
                 0.09058216273156768, 5.144778906814169}}], 
                InsetBox[
                 FormBox[
                  TagBox["A", HoldForm], TraditionalForm], {0., 
                 5.144778906814169}]}, {
                
                LineBox[{{0.540172903531997, 4.677071733467427}, {
                 0.5582893360783105, 4.677071733467427}}], 
                InsetBox[
                 FormBox[
                  TagBox["B", HoldForm], TraditionalForm], {
                 0.46770717334674283`, 4.677071733467427}]}, {
                
                LineBox[{{0.37712501061517517`, 4.209364560120685}, {
                 0.4055678097128874, 4.209364560120685}}], 
                
                LineBox[{{0.5039400384393699, 4.209364560120685}, {
                 0.4055678097128874, 4.109364560120685}, {0.4055678097128874, 
                 4.3093645601206845`}, {0.5039400384393699, 
                 4.209364560120685}}], 
                
                CircleBox[{0.5220564709856834, 4.209364560120685}, {
                 0.018116432546313534`, 0.04}], 
                
                LineBox[{{0.540172903531997, 4.209364560120685}, {
                 0.5582893360783105, 4.209364560120685}}]}, {
                
                LineBox[{{0.07246573018525436, 4.209364560120685}, {
                 0.0905821627315679, 4.209364560120685}}], 
                InsetBox[
                 FormBox[
                  TagBox["C", HoldForm], TraditionalForm], {
                 2.220446049250313*^-16, 4.209364560120685}]}, {
                
                LineBox[{{0.844832183961918, 3.223950213427199}, {
                 0.8901232653277018, 3.223950213427199}, {0.8901232653277018, 
                 3.1739502134271986`}, {0.9354143466934857, 
                 3.1739502134271986`}}], 
                
                LineBox[{{0.844832183961918, 3.3239502134271985`}, {
                 0.8901232653277018, 3.3239502134271985`}, {
                 0.8901232653277018, 3.373950213427199}, {0.9354143466934857, 
                 3.373950213427199}}], 
                
                CircleBox[{0.9354143466934857, 3.2739502134271987`}, {
                 0.04529108136578384, 0.1}, 
                 
                 NCache[{Rational[3, 2] Pi, Rational[5, 2] Pi}, {
                  4.71238898038469, 7.853981633974483}]], 
                
                LineBox[{{0.8901232653277018, 3.223950213427199}, {
                 0.8901232653277018, 3.3239502134271985`}}], 
                
                LineBox[{{0.9807054280592695, 3.2739502134271987`}, {
                 1.0259965094250534`, 3.2739502134271987`}}]}, {
                
                LineBox[{{0.3771250106151753, 3.7416573867739413`}, {
                 0.40556780971288753`, 3.7416573867739413`}}], 
                
                LineBox[{{0.50394003843937, 3.7416573867739413`}, {
                 0.40556780971288753`, 3.6416573867739412`}, {
                 0.40556780971288753`, 3.8416573867739414`}, {
                 0.50394003843937, 3.7416573867739413`}}], 
                
                CircleBox[{0.5220564709856835, 3.7416573867739413`}, {
                 0.018116432546313534`, 0.04}], 
                
                LineBox[{{0.5401729035319971, 3.7416573867739413`}, {
                 0.5582893360783107, 3.7416573867739413`}}]}, {
                
                LineBox[{{0.07246573018525436, 3.7416573867739413`}, {
                 0.0905821627315679, 3.7416573867739413`}}], 
                InsetBox[
                 FormBox[
                  TagBox["A", HoldForm], TraditionalForm], {
                 2.220446049250313*^-16, 3.7416573867739413`}]}, {
                
                LineBox[{{0.5401729035319971, 3.2739502134271987`}, {
                 0.5582893360783107, 3.2739502134271987`}}], 
                InsetBox[
                 FormBox[
                  TagBox["B", HoldForm], TraditionalForm], {
                 0.46770717334674294`, 3.2739502134271987`}]}, {
                
                LineBox[{{0.5401729035319971, 2.806243040080456}, {
                 0.5582893360783107, 2.806243040080456}}], 
                InsetBox[
                 FormBox[
                  TagBox["C", HoldForm], TraditionalForm], {
                 0.46770717334674294`, 2.806243040080456}]}, {
                
                LineBox[{{0.844832183961918, 1.8208286933869713`}, {
                 0.8901232653277018, 1.8208286933869713`}, {
                 0.8901232653277018, 1.7708286933869712`}, {
                 0.9354143466934857, 1.7708286933869712`}}], 
                
                LineBox[{{0.844832183961918, 1.9208286933869714`}, {
                 0.8901232653277018, 1.9208286933869714`}, {
                 0.8901232653277018, 1.9708286933869714`}, {
                 0.9354143466934857, 1.9708286933869714`}}], 
                
                CircleBox[{0.9354143466934857, 1.8708286933869713`}, {
                 0.04529108136578384, 0.1}, 
                 
                 NCache[{Rational[3, 2] Pi, Rational[5, 2] Pi}, {
                  4.71238898038469, 7.853981633974483}]], 
                
                LineBox[{{0.8901232653277018, 1.8208286933869713`}, {
                 0.8901232653277018, 1.9208286933869714`}}], 
                
                LineBox[{{0.9807054280592695, 1.8708286933869713`}, {
                 1.0259965094250534`, 1.8708286933869713`}}]}, {
                
                LineBox[{{0.5401729035319971, 2.3385358667337135`}, {
                 0.5582893360783107, 2.3385358667337135`}}], 
                InsetBox[
                 FormBox[
                  TagBox["A", HoldForm], TraditionalForm], {
                 0.46770717334674294`, 2.3385358667337135`}]}, {
                
                LineBox[{{0.3771250106151754, 1.8708286933869713`}, {
                 0.40556780971288764`, 1.8708286933869713`}}], 
                
                LineBox[{{0.5039400384393701, 1.8708286933869713`}, {
                 0.40556780971288764`, 1.7708286933869712`}, {
                 0.40556780971288764`, 1.9708286933869714`}, {
                 0.5039400384393701, 1.8708286933869713`}}], 
                
                CircleBox[{0.5220564709856836, 1.8708286933869713`}, {
                 0.018116432546313534`, 0.04}], 
                
                LineBox[{{0.5401729035319972, 1.8708286933869713`}, {
                 0.5582893360783108, 1.8708286933869713`}}]}, {
                
                LineBox[{{0.07246573018525436, 1.8708286933869713`}, {
                 0.0905821627315679, 1.8708286933869713`}}], 
                InsetBox[
                 FormBox[
                  TagBox["B", HoldForm], TraditionalForm], {
                 2.220446049250313*^-16, 1.8708286933869713`}]}, {
                LineBox[{{0.3771250106151754, 1.4031215200402283`}, {
                 0.40556780971288764`, 1.4031215200402283`}}], 
                
                LineBox[{{0.5039400384393701, 1.4031215200402283`}, {
                 0.40556780971288764`, 1.3031215200402282`}, {
                 0.40556780971288764`, 1.5031215200402284`}, {
                 0.5039400384393701, 1.4031215200402283`}}], 
                
                CircleBox[{0.5220564709856836, 1.4031215200402283`}, {
                 0.018116432546313534`, 0.04}], 
                
                LineBox[{{0.5401729035319972, 1.4031215200402283`}, {
                 0.5582893360783108, 1.4031215200402283`}}]}, {
                
                LineBox[{{0.07246573018525458, 1.4031215200402283`}, {
                 0.09058216273156812, 1.4031215200402283`}}], 
                InsetBox[
                 FormBox[
                  TagBox["C", HoldForm], TraditionalForm], {
                 4.440892098500626*^-16, 1.4031215200402283`}]}, {
                
                LineBox[{{0.8448321839619181, 0.41770717334674307`}, {
                 0.8901232653277019, 0.41770717334674307`}, {
                 0.8901232653277019, 0.3677071733467431}, {0.9354143466934858,
                  0.3677071733467431}}], 
                
                LineBox[{{0.8448321839619181, 0.5177071733467431}, {
                 0.8901232653277019, 0.5177071733467431}, {0.8901232653277019,
                  0.567707173346743}, {0.9354143466934858, 
                 0.567707173346743}}], 
                
                CircleBox[{0.9354143466934858, 0.46770717334674305`}, {
                 0.04529108136578384, 0.1}, 
                 
                 NCache[{Rational[3, 2] Pi, Rational[5, 2] Pi}, {
                  4.71238898038469, 7.853981633974483}]], 
                
                LineBox[{{0.8901232653277019, 0.41770717334674307`}, {
                 0.8901232653277019, 0.5177071733467431}}], 
                
                LineBox[{{0.9807054280592696, 0.46770717334674305`}, {
                 1.0259965094250534`, 0.46770717334674305`}}]}, {
                
                LineBox[{{0.5401729035319972, 0.9354143466934852}, {
                 0.5582893360783108, 0.9354143466934852}}], 
                InsetBox[
                 FormBox[
                  TagBox["A", HoldForm], TraditionalForm], {
                 0.46770717334674305`, 0.9354143466934852}]}, {
                LineBox[{{0.5401729035319973, 0.46770717334674305`}, {
                 0.5582893360783109, 0.46770717334674305`}}], 
                InsetBox[
                 FormBox[
                  TagBox["B", HoldForm], TraditionalForm], {
                 0.46770717334674317`, 0.46770717334674305`}]}, {
                
                LineBox[{{0.3771250106151755, 0.}, {0.40556780971288775`, 
                 0.}}], 
                
                LineBox[{{0.5039400384393702, 0.}, {
                 0.40556780971288775`, -0.1}, {0.40556780971288775`, 0.1}, {
                 0.5039400384393702, 0.}}], 
                
                CircleBox[{0.5220564709856838, 0.}, {0.018116432546313534`, 
                 0.04}], 
                
                LineBox[{{0.5401729035319973, 0.}, {0.5582893360783109, 
                 0.}}]}, {
                
                LineBox[{{0.07246573018525458, 0.}, {0.09058216273156812, 
                 0.}}], 
                InsetBox[
                 FormBox[
                  TagBox["C", HoldForm], TraditionalForm], {
                 4.440892098500626*^-16, 0.}]}}, {
               
               LineBox[{{{1.3125393573086606`, 3.223950213427199}, {
                1.0259965094250534`, 0.46770717334674305`}}, {{
                1.3125393573086606`, 3.248950213427199}, {1.0259965094250534`,
                 1.8708286933869713`}}, {{1.3125393573086606`, 
                3.2739502134271987`}, {1.0259965094250534`, 
                3.2739502134271987`}}, {{1.3125393573086606`, 
                3.2989502134271986`}, {1.0259965094250532`, 
                4.677071733467427}}, {{1.3125393573086606`, 
                3.3239502134271985`}, {1.0259965094250532`, 
                6.080193253507654}}}], 
               
               LineBox[{{{0.8448321839619177, 6.030193253507655}, {
                0.5582893360783105, 5.612486080160912}}, {{0.8448321839619177,
                 6.080193253507654}, {0.5582893360783104, 
                6.080193253507654}}, {{0.8448321839619177, 
                6.130193253507654}, {0.5582893360783104, 
                6.547900426854397}}}], 
               
               LineBox[{{0.37712501061517506`, 6.547900426854397}, {
                0.09058216273156768, 6.547900426854397}}], {}, 
               
               LineBox[{{0.37712501061517506`, 6.080193253507654}, {
                0.09058216273156768, 6.080193253507654}}], {}, {}, 
               LineBox[{{{0.8448321839619177, 4.627071733467427}, {
                0.5582893360783105, 4.209364560120685}}, {{0.8448321839619177,
                 4.677071733467427}, {0.5582893360783105, 
                4.677071733467427}}, {{0.8448321839619177, 
                4.727071733467427}, {0.5582893360783105, 
                5.144778906814169}}}], 
               
               LineBox[{{0.37712501061517517`, 5.144778906814169}, {
                0.09058216273156768, 5.144778906814169}}], {}, {}, 
               
               LineBox[{{0.37712501061517517`, 4.209364560120685}, {
                0.0905821627315679, 4.209364560120685}}], {}, 
               
               LineBox[{{{0.844832183961918, 3.223950213427199}, {
                0.5582893360783107, 2.806243040080456}}, {{0.844832183961918, 
                3.2739502134271987`}, {0.5582893360783107, 
                3.2739502134271987`}}, {{0.844832183961918, 
                3.3239502134271985`}, {0.5582893360783107, 
                3.7416573867739413`}}}], 
               
               LineBox[{{0.3771250106151753, 3.7416573867739413`}, {
                0.0905821627315679, 3.7416573867739413`}}], {}, {}, {}, 
               
               LineBox[{{{0.844832183961918, 1.8208286933869713`}, {
                0.5582893360783108, 1.4031215200402283`}}, {{
                0.844832183961918, 1.8708286933869713`}, {0.5582893360783108, 
                1.8708286933869713`}}, {{0.844832183961918, 
                1.9208286933869714`}, {0.5582893360783107, 
                2.3385358667337135`}}}], {}, 
               
               LineBox[{{0.3771250106151754, 1.8708286933869713`}, {
                0.0905821627315679, 1.8708286933869713`}}], {}, 
               
               LineBox[{{0.3771250106151754, 1.4031215200402283`}, {
                0.09058216273156812, 1.4031215200402283`}}], {}, 
               
               LineBox[{{{0.8448321839619181, 0.41770717334674307`}, {
                0.5582893360783109, 0.}}, {{0.8448321839619181, 
                0.46770717334674305`}, {0.5582893360783109, 
                0.46770717334674305`}}, {{0.8448321839619181, 
                0.5177071733467431}, {0.5582893360783108, 
                0.9354143466934852}}}], {}, {}, 
               
               LineBox[{{0.3771250106151755, 0.}, {0.09058216273156812, 
                0.}}], {}}}, AspectRatio -> 0.4529108136578383, ImageSize -> 
             NCache[
               Rational[550, 3], 183.33333333333334`]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Truth density", "scanner" -> "Boolean", "id" -> 
     "TruthDensity", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["5", "8"], "=", 
               TemplateBox[{"62.5`", "\"%\""}, "RowDefault"]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Boolean operator number", "scanner" -> "Boolean", "id" -> 
     "BooleanOperatorNumber", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FromDigits[Boole[BooleanTable[( !A &&  !B && C) || ( !A && B &&  !C) \
|| ( !A && B && C) || (A &&  !B &&  !C) || (A && B &&  !C), {A, B, C}]], \
2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"94", 
              StyleBox["\" with variable ordering \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              StyleBox[
               RowBox[{"{", 
                 RowBox[{"A", ",", "B", ",", "C"}], "}"}], 
               GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Rule 94 elementary cellular automaton evolution", 
     "scanner" -> "Boolean", "id" -> "BooleanRuleECAEvolution", "position" -> 
     "900", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            PaneBox[
             GraphicsBox[{
               RasterBox[CompressedData["
1:eJzt1jFKA0EYR/GFgIVtCGrAQvAGVhYyhYW9paVgLVhp4QU8gVcR9BKCYuEF
JAQED6DRG2wx5vtmfoGF8HhsMbM8/nvnl6cXk2EY5qvnYPX8/v/+2Nh8nC7K
y/718Xz2XnYPn3e2b57KWD78/T7L0dfV2+3Jspw9bN3P7l75fD5/tF+7P1nO
gc/n5/XHvmcst9/4fP66+lCb6xifz8/Sq9p9y3IvfH7Pfqu9qt23aPfI5/fs
99ar2n3Lcu98fmRfr2L2Ldp3wudH9vUqV9+yfFd8vn2F6xi/Z1+v2ub2Gz+j
r1e4/cbP7usVbr/xo/l6hUfgOsa3r/BWuf3Wp69XeA9cx9r29QrvmdtvMX29
wnH7LbuvVzgep29ZulHb1yscj891zL7C8VZ5q/tNr3Acb7Vj0c4Zx/H4fbOv
cBzPwtfVsWjngON4e9y+wnG8Va5X+H/yH0k1+Cg=
                "], {{0, 0}, {51, 
                26}}, {0, 1}], {{Antialiasing -> False, 
                 GrayLevel[
                  NCache[-1 + GoldenRatio, 0.6180339887498949]], 
                 
                 LineBox[{{{0, 26}, {51, 26}}, {{0, 25}, {51, 25}}, {{0, 
                  24}, {51, 24}}, {{0, 23}, {51, 23}}, {{0, 22}, {51, 22}}, {{
                  0, 21}, {51, 21}}, {{0, 20}, {51, 20}}, {{0, 19}, {51, 
                  19}}, {{0, 18}, {51, 18}}, {{0, 17}, {51, 17}}, {{0, 16}, {
                  51, 16}}, {{0, 15}, {51, 15}}, {{0, 14}, {51, 14}}, {{0, 
                  13}, {51, 13}}, {{0, 12}, {51, 12}}, {{0, 11}, {51, 11}}, {{
                  0, 10}, {51, 10}}, {{0, 9}, {51, 9}}, {{0, 8}, {51, 8}}, {{
                  0, 7}, {51, 7}}, {{0, 6}, {51, 6}}, {{0, 5}, {51, 5}}, {{0, 
                  4}, {51, 4}}, {{0, 3}, {51, 3}}, {{0, 2}, {51, 2}}, {{0, 
                  1}, {51, 1}}, {{0, 0}, {51, 0}}}]}, {
                Antialiasing -> False, 
                 GrayLevel[
                  NCache[-1 + GoldenRatio, 0.6180339887498949]], 
                 
                 LineBox[{{{0, 0}, {0, 26}}, {{1, 0}, {1, 26}}, {{2, 0}, {2, 
                  26}}, {{3, 0}, {3, 26}}, {{4, 0}, {4, 26}}, {{5, 0}, {5, 
                  26}}, {{6, 0}, {6, 26}}, {{7, 0}, {7, 26}}, {{8, 0}, {8, 
                  26}}, {{9, 0}, {9, 26}}, {{10, 0}, {10, 26}}, {{11, 0}, {11,
                   26}}, {{12, 0}, {12, 26}}, {{13, 0}, {13, 26}}, {{14, 0}, {
                  14, 26}}, {{15, 0}, {15, 26}}, {{16, 0}, {16, 26}}, {{17, 
                  0}, {17, 26}}, {{18, 0}, {18, 26}}, {{19, 0}, {19, 26}}, {{
                  20, 0}, {20, 26}}, {{21, 0}, {21, 26}}, {{22, 0}, {22, 
                  26}}, {{23, 0}, {23, 26}}, {{24, 0}, {24, 26}}, {{25, 0}, {
                  25, 26}}, {{26, 0}, {26, 26}}, {{27, 0}, {27, 26}}, {{28, 
                  0}, {28, 26}}, {{29, 0}, {29, 26}}, {{30, 0}, {30, 26}}, {{
                  31, 0}, {31, 26}}, {{32, 0}, {32, 26}}, {{33, 0}, {33, 
                  26}}, {{34, 0}, {34, 26}}, {{35, 0}, {35, 26}}, {{36, 0}, {
                  36, 26}}, {{37, 0}, {37, 26}}, {{38, 0}, {38, 26}}, {{39, 
                  0}, {39, 26}}, {{40, 0}, {40, 26}}, {{41, 0}, {41, 26}}, {{
                  42, 0}, {42, 26}}, {{43, 0}, {43, 26}}, {{44, 0}, {44, 
                  26}}, {{45, 0}, {45, 26}}, {{46, 0}, {46, 26}}, {{47, 0}, {
                  47, 26}}, {{48, 0}, {48, 26}}, {{49, 0}, {49, 26}}, {{50, 
                  0}, {50, 26}}, {{51, 0}, {51, 26}}}]}}}, AxesStyle -> 
              Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, Frame -> 
              False, FrameLabel -> {None, None}, FrameStyle -> Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
              Automatic, ImageSize -> NCache[{
                 Rational[583, 2], 140}, {291.5, 140}], 
              Method -> {
               "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
                Automatic}], Alignment -> {Left, Center}, ImageSize -> 550], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "9", "datatypes" -> 
    "Simplify", "timedout" -> "", "timedoutpods" -> "", "timing" -> "4.291", 
    "parsetiming" -> "3.052", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP961612caa9d2ach868df00005294ec429651d465", "host" -> 
    "https://www4f.wolframalpha.com", "server" -> "13", "related" -> 
    "https://www4f.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa961712caa9d2ach868df00001d7235adhhbfgd389033684486377260567", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2019, 10, 22, 17, 55, 31.47169`8.250495045447117}, "Line" -> 
    42, "SessionID" -> 17602646018418589660}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "simplify ((not A and not B and C) or (not A and B and not C) or (not A \
and B and C) or (A and not B and not C) or (A and B and not C))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {699., 704.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.780744931644986*^9},ExpressionUUID->"818f0491-f661-4426-a840-\
a814863ca62c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"3", " ", "to", " ", "binary"}]], "Input",
 CellChangeTimes->{{3.780745451459827*^9, 3.780745457673533*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"e506e9de-cdf3-4244-b0dc-e168b8454166"],

Cell[BoxData[
 RowBox[{"3", " ", "binary", " ", "to"}]], "Output",
 CellChangeTimes->{3.7807454588573103`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"ae698c48-206c-439d-8616-f4939419dfa4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["21 to binary", "WolframAlphaLong",
 CellChangeTimes->{{3.780748036374454*^9, 3.780748048861809*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"c6dcb0e8-31dd-44e5-a75e-b61c10c0df08"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "21 to binary", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               StyleBox["\"convert\"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               TemplateBox[{"\" \"", "21", "\" \""}, "RowDefault"], 
               StyleBox["\"to\"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               TemplateBox[{"\" \"", 
                 RowBox[{"base", "2"}]}, "RowDefault"]}, "RowDefault"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "NumberSystems", "id" -> 
     "Result", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"10101\"", "2"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Convert the following to base \"", "2"}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    SubscriptBox["\"21\"", "\"10\""]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"powers \"", "\"of \"", 
                    TemplateBox[{"2", "\" \""}, "RowDefault"], "\"that \"", 
                    "\"will \"", "\"be \"", "\"used \"", "\"as \"", 
                    "\"the \"", "\"places \"", "\"of \"", "\"the \"", 
                    "\"digits \"", "\"in \"", "\"the \"", 
                    
                    TemplateBox[{"\"base\[Hyphen]\"", "2", "\" \""}, 
                    "RowDefault"], "\"representation \"", "\"of \"", "21"}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    
                    GridBox[{{
                    "\"Power\"", 
                    "\"\\!\\(\\*SuperscriptBox[\\(Base\\), \\(Power\\)]\\)\"",
                     "\"Place value\""}, {"5", 
                    TagBox[
                    SuperscriptBox["2", "5"], HoldForm], "32"}, {"4", 
                    TagBox[
                    SuperscriptBox["2", "4"], HoldForm], "16"}, {"3", 
                    TagBox[
                    SuperscriptBox["2", "3"], HoldForm], "8"}, {"2", 
                    TagBox[
                    SuperscriptBox["2", "2"], HoldForm], "4"}, {"1", 
                    TagBox[
                    SuperscriptBox["2", "1"], HoldForm], "2"}, {"0", 
                    TagBox[
                    SuperscriptBox["2", "0"], HoldForm], "1"}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxDividers -> {"Columns" -> {True, True, 
                    Directive[
                    Thickness[Large]]}, "Rows" -> {True, {}, True}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, FrameStyle -> 
                    GrayLevel[0.5]], "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Label \"", "\"each \"", "\"place \"", "\"of \"", 
                    "\"the \"", 
                    
                    TemplateBox[{"\"base\[Hyphen]\"", "2", "\" \""}, 
                    "RowDefault"], "\"representation \"", "\"of \"", 
                    "\"21 \"", "\"with \"", "\"the \"", "\"appropriate \"", 
                    "\"power \"", "\"of \"", "2"}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{"\"Place\"", "\" \"", "\" \"", 
                    TagBox[
                    SuperscriptBox["2", "4"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "3"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "2"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "1"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "0"], HoldForm], "\" \""}, {
                    "\" \"", "\" \"", "\" \"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", "\" \""}, {
                    SubscriptBox["21", "10"], "\"=\"", "\"(\"", "\"__\"", 
                    "\"__\"", "\"__\"", "\"__\"", "\"__\"", 
                    SubscriptBox["\")\"", 
                    SubscriptBox["\"\"", "2"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}], "Grid"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"value \"", "\"of \"", 
                    "\"the \"", "\"first \"", "\"digit \"", "\"from \"", 
                    "\"the \"", "\"right \"", "\"of \"", "\"21 \"", "\"in \"",
                     "\"base \"", "2"}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["21", "2"], "=", "10"}], HoldForm], "\" \""}, 
                    "RowDefault"]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"with remainder\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    FrameBox[
                    TagBox["1", HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False]}, 
                    "RowDefault"]}, "RowDefault"]}, {
                    TagBox[
                    GridBox[{{"\"Place\"", "\" \"", "\" \"", 
                    TagBox[
                    SuperscriptBox["2", "4"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "3"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "2"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "1"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "0"], HoldForm], "\" \""}, {
                    "\" \"", "\" \"", "\" \"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", "\" \""}, {
                    SubscriptBox["21", "10"], "\"=\"", "\"(\"", "\"__\"", 
                    "\"__\"", "\"__\"", "\"__\"", "1", 
                    SubscriptBox["\")\"", 
                    SubscriptBox["\"\"", "2"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None, 
                    "ItemsIndexed" -> {{{1, 3}, {-2, -2}} -> {
                    GrayLevel[0.5]}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxItemStyle -> {
                    "Columns" -> {{None}}, "Rows" -> {{None}}, 
                    "ItemsIndexed" -> {{{1, 3}, {-1, -2}} -> {
                    GrayLevel[0.5]}}}], "Grid"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"value \"", "\"of \"", 
                    "\"the \"", "\"next \"", "\"digit \"", "\"from \"", 
                    "\"the \"", "\"right \"", "\"of \"", "\"21 \"", "\"in \"",
                     "\"base \"", "2"}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["10", "2"], "=", "5"}], HoldForm], "\" \""}, 
                    "RowDefault"]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"with remainder\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    FrameBox[
                    TagBox["0", HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False]}, 
                    "RowDefault"]}, "RowDefault"]}, {
                    TagBox[
                    GridBox[{{"\"Place\"", "\" \"", "\" \"", 
                    TagBox[
                    SuperscriptBox["2", "4"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "3"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "2"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "1"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "0"], HoldForm], "\" \""}, {
                    "\" \"", "\" \"", "\" \"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", "\" \""}, {
                    SubscriptBox["21", "10"], "\"=\"", "\"(\"", "\"__\"", 
                    "\"__\"", "\"__\"", "0", "1", 
                    SubscriptBox["\")\"", 
                    SubscriptBox["\"\"", "2"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None, 
                    "ItemsIndexed" -> {{{1, 3}, {-3, -3}} -> {
                    GrayLevel[0.5]}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxItemStyle -> {
                    "Columns" -> {{None}}, "Rows" -> {{None}}, 
                    "ItemsIndexed" -> {{{1, 3}, {-2, -2}} -> {
                    GrayLevel[0.5]}}}], "Grid"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"value \"", "\"of \"", 
                    "\"the \"", "\"next \"", "\"digit \"", "\"from \"", 
                    "\"the \"", "\"right \"", "\"of \"", "\"21 \"", "\"in \"",
                     "\"base \"", "2"}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["5", "2"], "=", "2"}], HoldForm], "\" \""}, 
                    "RowDefault"]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"with remainder\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    FrameBox[
                    TagBox["1", HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False]}, 
                    "RowDefault"]}, "RowDefault"]}, {
                    TagBox[
                    GridBox[{{"\"Place\"", "\" \"", "\" \"", 
                    TagBox[
                    SuperscriptBox["2", "4"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "3"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "2"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "1"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "0"], HoldForm], "\" \""}, {
                    "\" \"", "\" \"", "\" \"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", "\" \""}, {
                    SubscriptBox["21", "10"], "\"=\"", "\"(\"", "\"__\"", 
                    "\"__\"", "1", "0", "1", 
                    SubscriptBox["\")\"", 
                    SubscriptBox["\"\"", "2"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None, 
                    "ItemsIndexed" -> {{{1, 3}, {-4, -4}} -> {
                    GrayLevel[0.5]}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxItemStyle -> {
                    "Columns" -> {{None}}, "Rows" -> {{None}}, 
                    "ItemsIndexed" -> {{{1, 3}, {-3, -2}} -> {
                    GrayLevel[0.5]}}}], "Grid"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"value \"", "\"of \"", 
                    "\"the \"", "\"next \"", "\"digit \"", "\"from \"", 
                    "\"the \"", "\"right \"", "\"of \"", "\"21 \"", "\"in \"",
                     "\"base \"", "2"}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["2", "2"], "=", "1"}], HoldForm], "\" \""}, 
                    "RowDefault"]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"with remainder\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    FrameBox[
                    TagBox["0", HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False]}, 
                    "RowDefault"]}, "RowDefault"]}, {
                    TagBox[
                    GridBox[{{"\"Place\"", "\" \"", "\" \"", 
                    TagBox[
                    SuperscriptBox["2", "4"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "3"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "2"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "1"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "0"], HoldForm], "\" \""}, {
                    "\" \"", "\" \"", "\" \"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", "\" \""}, {
                    SubscriptBox["21", "10"], "\"=\"", "\"(\"", "\"__\"", "0",
                     "1", "0", "1", 
                    SubscriptBox["\")\"", 
                    SubscriptBox["\"\"", "2"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None, 
                    "ItemsIndexed" -> {{{1, 3}, {-5, -5}} -> {
                    GrayLevel[0.5]}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxItemStyle -> {
                    "Columns" -> {{None}}, "Rows" -> {{None}}, 
                    "ItemsIndexed" -> {{{1, 3}, {-4, -2}} -> {
                    GrayLevel[0.5]}}}], "Grid"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Determine \"", "\"the \"", "\"value \"", "\"of \"", 
                    "\"the \"", "\"last \"", "\"remaining \"", "\"digit \"", 
                    "\"of \"", "\"21 \"", "\"in \"", "\"base \"", "2"}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["1", "2"], "=", "0"}], HoldForm], "\" \""}, 
                    "RowDefault"]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"with remainder\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    FrameBox[
                    TagBox["1", HoldForm], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False]}, 
                    "RowDefault"]}, "RowDefault"]}, {
                    TagBox[
                    GridBox[{{"\"Place\"", "\" \"", "\" \"", 
                    TagBox[
                    SuperscriptBox["2", "4"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "3"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "2"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "1"], HoldForm], 
                    TagBox[
                    SuperscriptBox["2", "0"], HoldForm], "\" \""}, {
                    "\" \"", "\" \"", "\" \"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", 
                    "\"\[DownArrow]\"", "\"\[DownArrow]\"", "\" \""}, {
                    SubscriptBox["21", "10"], "\"=\"", "\"(\"", "1", "0", "1",
                     "0", "1", 
                    SubscriptBox["\")\"", 
                    SubscriptBox["\"\"", "2"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None, 
                    "ItemsIndexed" -> {{{1, 3}, {-6, -6}} -> {
                    GrayLevel[0.5]}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxItemStyle -> {
                    "Columns" -> {{None}}, "Rows" -> {{None}}, 
                    "ItemsIndexed" -> {{{1, 3}, {-5, -2}} -> {
                    GrayLevel[0.5]}}}], "Grid"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"number \"", 
                    TemplateBox[{
                    SubscriptBox["\"21\"", "\"10\""], "\" \""}, "RowDefault"],
                     "\"is \"", "\"equivalent \"", "\"to \"", 
                    TemplateBox[{
                    TagBox[
                    SubscriptBox["\"10101\"", "\"2\""], HoldForm], "\" \""}, 
                    "RowDefault"], "\"in \"", "\"base \"", 
                    TemplateBox[{"2", "\".\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    SubscriptBox["\"21\"", "\"10\""], "=", 
                    SubscriptBox["\"10101\"", "\"2\""]}], HoldForm]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show exponent form", "input" -> 
         "Result__Show exponent form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Other base conversions", "scanner" -> "NumberSystems", 
     "id" -> "OtherBaseConversions", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 4]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"111\"", "4"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 8]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"25\"", "8"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 12]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"19\"", "12"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 16]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"15\"", "16"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Show exponent form", "input" -> 
         "OtherBaseConversions__Show exponent form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show digit key", "input" -> 
         "OtherBaseConversions__Show digit key"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More bases", "input" -> 
         "OtherBaseConversions__More bases"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Other data types", "scanner" -> "NumberSystems", "id" -> 
     "HardwareDataTypes", "position" -> "400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    "\"hexadecimal value\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]]}, {
                    TagBox[
                    PaneBox[
                    "\"unsigned 16\[Dash]bit integer\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    
                    TemplateBox[{"\"1500\"", "\" \"", "\"\""}, 
                    "RowDefault"]}, {
                    TagBox[
                    PaneBox[
                    "\"unsigned 32\[Dash]bit integer\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    
                    TemplateBox[{"\"15000000\"", "\" \"", "\"\""}, 
                    "RowDefault"]}, {
                    TagBox[
                    PaneBox[
                    "\"IEEE double\[Dash]precision number\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    
                    TemplateBox[{"\"0000000000003540\"", "\" \"", "\"\""}, 
                    "RowDefault"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}}}, AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {None, None}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", 
                   "\"assuming little\[Dash]endian byte ordering\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Big-endian", "input" -> 
         "HardwareDataTypes__Big-endian"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "HardwareDataTypes__More"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "ConvertBase", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "0.783", "parsetiming" -> "0.298", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSP77131c17da46fcb8170700004a34cf4b518ef531", "host" -> 
    "https://www4f.wolframalpha.com", "server" -> "8", "related" -> 
    "https://www4f.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa77141c17da46fcb81707000012378a732bb3f6h04772732391356847504", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2019, 10, 22, 18, 47, 30.598801`8.238279390162024}, "Line" -> 
    52, "SessionID" -> 17602646018418589660}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "21 to binary"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {901., 906.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.7807480507721987`*^9},ExpressionUUID->"4f6671c5-1947-4243-b9e4-\
2fdc6b7d736d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.7807480403247633`*^9},ExpressionUUID->"cc66deb5-1329-45a4-911e-\
4babaa167563"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "3*binary*to", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "http://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["didyoumeans", {"count" -> "1"}, {"\n  ", 
      XMLElement[
      "didyoumean", {"score" -> "0.492214", "level" -> "medium"}, {"binary"}],
       "\n "}]}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> "false", "numpods" -> "0", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.836", 
    "parsetiming" -> "0.", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "", "parseidserver" -> "47", "host" -> 
    "https://www4f.wolframalpha.com", "server" -> "47", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2019, 10, 22, 18, 47, 14.442006`7.912202506429828}, "Line" -> 
    50, "SessionID" -> 17602646018418589660}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "3*binary*to"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1373., {41., 47.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.780748034489212*^9},ExpressionUUID->"986623a3-b0c7-4e08-9496-\
0dc818875f87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "21 to binary", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", "BaseForm[21, 2]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               StyleBox["\"convert\"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               TemplateBox[{"\" \"", "21", "\" \""}, "RowDefault"], 
               StyleBox["\"to\"", {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], 
               TemplateBox[{"\" \"", 
                 RowBox[{"base", "2"}]}, "RowDefault"]}, "RowDefault"], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "NumberSystems", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 2]"}], 
       XMLElement["moutput", {}, {"2^^10101"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"10101\"", "2"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show exponent form", "input" -> 
         "Result__Show exponent form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "OtherBaseConversions", "numsubpods" -> 
     "4", "position" -> "300", "scanner" -> "NumberSystems", "title" -> 
     "Other base conversions"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 4]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"111\"", "4"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 8]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"25\"", "8"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 12]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"19\"", "12"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"BaseForm[21, 16]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SubscriptBox["\"15\"", "16"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Show exponent form", "input" -> 
         "OtherBaseConversions__Show exponent form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show digit key", "input" -> 
         "OtherBaseConversions__Show digit key"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More bases", "input" -> 
         "OtherBaseConversions__More bases"}, {}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "HardwareDataTypes", "numsubpods" -> 
     "1", "position" -> "400", "scanner" -> "NumberSystems", "title" -> 
     "Other data types"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    Global`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    "\"hexadecimal value\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    Global`TagBoxWrapper["Label"]]}, {
                    TagBox[
                    PaneBox[
                    "\"unsigned 16\[Dash]bit integer\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    Global`TagBoxWrapper["Label"]], 
                    
                    TemplateBox[{"\"1500\"", "\" \"", "\"\""}, 
                    "RowDefault"]}, {
                    TagBox[
                    PaneBox[
                    "\"unsigned 32\[Dash]bit integer\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    Global`TagBoxWrapper["Label"]], 
                    
                    TemplateBox[{"\"15000000\"", "\" \"", "\"\""}, 
                    "RowDefault"]}, {
                    TagBox[
                    PaneBox[
                    "\"IEEE double\[Dash]precision number\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    Global`TagBoxWrapper["Label"]], 
                    
                    TemplateBox[{"\"0000000000003540\"", "\" \"", "\"\""}, 
                    "RowDefault"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}}}, AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {None, None}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", 
                   "\"assuming little\[Dash]endian byte ordering\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Big-endian", "input" -> 
         "HardwareDataTypes__Big-endian"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More", "input" -> "HardwareDataTypes__More"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "ConvertBase", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "0.759", "parsetiming" -> "0.297", "parsetimedout" -> "false", 
    "recalculate" -> "", "id" -> 
    "MSP64121fg3f64i5ifbba8h00005g27df49ge45b6h2", "host" -> 
    "https://www4f.wolframalpha.com", "server" -> "4", "related" -> 
    "https://www4f.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa64131fg3f64i5ifbba8h000025g1ea0g40c7fiei3449977083315809317", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 3., 
    "Date" -> {2019, 10, 22, 18, 47, 3.62358`7.311712842287704}, "Line" -> 49,
     "SessionID" -> 17602646018418589660}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", "BaseForm[21, 2]"}, Typeset`open$$ = 
   False, Typeset`newq$$ = "21 to binary"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{142., {49., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[49]:=",ExpressionUUID->"cd6af43f-d486-4b9b-a9ce-c1750643fa27"],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   SubscriptBox["\<\"10101\"\>", "\<\"2\"\>"],
   21,
   Editable->False],
  BaseForm[#, 2]& ]], "Output",
 CellChangeTimes->{3.78074802367232*^9},
 CellLabel->
  "Out[49]//BaseForm=",ExpressionUUID->"e3b2890e-1255-4bc4-9378-4cd68f835618"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], "\[And]", "b"}], ")"}], "\[Or]", 
   RowBox[{"(", 
    RowBox[{"a", "\[And]", 
     RowBox[{"\[Not]", "b"}]}], ")"}], " ", "\[Or]", " ", 
   RowBox[{"(", 
    RowBox[{"a", " ", "\[And]", " ", "b"}], ")"}]}], " ", "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"2174e7d0-e3fd-425d-9be9-1ea0ec1a9448"],

Cell[BoxData[
 RowBox[{"a", "||", "b"}]], "Output",
 CellChangeTimes->{3.780749525593954*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"d25b2193-070c-4e6d-8bdb-2d0e2cb38e2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"a", "\[And]", 
     RowBox[{"\[Not]", "b"}]}], ")"}], " ", "\[Or]", " ", 
   RowBox[{"(", 
    RowBox[{"a", " ", "\[And]", " ", "b"}], ")"}]}], " ", "]"}]], "Input",
 CellChangeTimes->{3.780749529967885*^9},
 CellLabel->"In[54]:=",ExpressionUUID->"675181fb-e201-4b2d-a420-fa06e5597b5d"],

Cell[BoxData["a"], "Output",
 CellChangeTimes->{3.780749531683302*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"326307db-9726-45e3-b0e6-5f493da0a4bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "a"}], "\[And]", "b"}], ")"}], "\[Or]", " ", "a"}], 
  " ", "]"}]], "Input",
 CellChangeTimes->{{3.780749594046389*^9, 3.780749595471466*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"cf4410b7-34c8-4cf9-b824-d5ba0dca43a4"],

Cell[BoxData[
 RowBox[{"a", "||", "b"}]], "Output",
 CellChangeTimes->{3.780749596232563*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"74808fca-817c-4015-b19e-f4e0fc784c87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", 
       RowBox[{"a", "||", "b"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", 
        RowBox[{"a", "||", "b"}]}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[56]:=",ExpressionUUID->"92612781-9e76-4685-abd8-78656ead6058"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["a",
       HoldForm], 
      TagBox["b",
       HoldForm], 
      TagBox[
       RowBox[{"a", "||", "b"}],
       HoldForm]},
     {"True", "True", "True"},
     {"True", "False", "True"},
     {"False", "True", "True"},
     {"False", "False", "False"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
      "Rows" -> {False, True, {False}, False}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, TableHeadings -> {None, {$CellContext`a, $CellContext`b, 
       Or[$CellContext`a, $CellContext`b]}}]]]], "Output",
 CellChangeTimes->{3.780749876704578*^9},
 CellLabel->
  "Out[56]//TableForm=",ExpressionUUID->"175d7fc6-f4da-45b2-bec3-\
bd19b2dc7d9f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"not", " ", "A"}], ")"}], " ", "and", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"not", " ", "B", " ", "and", " ", "C"}], ")"}], " ", "or", " ", 
    RowBox[{"(", 
     RowBox[{"B", " ", "and", " ", "not", " ", "C"}], ")"}]}], 
   ")"}]}]], "Input",
 CellChangeTimes->{{3.780755078128895*^9, 
  3.780755078131075*^9}},ExpressionUUID->"266a2498-8276-4c97-9438-\
f2d0f58592b0"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.7807551109939213`*^9},ExpressionUUID->"e9de392d-2f93-4c46-9ec7-\
b9225b32a2a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanMinimize", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"\[Not]", "B"}], "\[And]", " ", "\:0441"}], " ", ")"}], "\[Or]", 
   " ", 
   RowBox[{"(", 
    RowBox[{"B", " ", "\[And]", "  ", 
     RowBox[{"\[Not]", "C"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.780755128726533*^9, 3.780755155703628*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"3e36774e-33e2-45f9-ac74-6ea57aa18ca0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"\:0441", "&&", 
    RowBox[{"!", "B"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{"B", "&&", 
    RowBox[{"!", "C"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.7807551562161283`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"ca605e13-e446-4744-a1df-bb9f7246e054"]
}, Open  ]]
},
WindowSize->{1440, 644},
WindowMargins->{{31, Automatic}, {Automatic, 8}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 175, 3, 30, "Input",ExpressionUUID->"dfdef68e-d752-4929-8146-ebb004141fc4"],
Cell[758, 27, 345, 8, 34, "Output",ExpressionUUID->"cd59111f-daa8-46a0-86d6-ece1953aae1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1140, 40, 493, 12, 30, "Input",ExpressionUUID->"b8e011eb-c03c-4a41-a311-e1ffd7878299"],
Cell[1636, 54, 172, 3, 34, "Output",ExpressionUUID->"f1276e5c-1f89-44ca-8f68-ee72c4673a72"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1845, 62, 1771, 42, 30, "Input",ExpressionUUID->"74c53090-7a06-4dbe-b315-61169d0bf7d7"],
Cell[3619, 106, 551, 14, 34, "Output",ExpressionUUID->"d594d8d6-57fd-4776-93f2-3c7ae8991250"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4207, 125, 208, 2, 41, "WolframAlphaLong",ExpressionUUID->"f5893d22-fdbb-45c6-aa5e-b95f7c32525e"],
Cell[4418, 129, 81631, 1590, 1131, "Print",ExpressionUUID->"fdf50d56-ae17-4d79-8bfc-95461023793c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86086, 1724, 1273, 31, 52, "Input",ExpressionUUID->"a744c519-f309-4d0c-832c-fc17e68bfb64"],
Cell[87362, 1757, 152, 2, 34, "Output",ExpressionUUID->"0e208c30-f5c8-441f-a906-4d830b06ef07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87551, 1764, 1194, 34, 30, "Input",ExpressionUUID->"82bfaa09-9990-4cf1-b34e-0ead9bc2d692"],
Cell[88748, 1800, 2385, 69, 332, "Output",ExpressionUUID->"61b64f3f-83c9-4800-9b4c-1a749c5c8686"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91170, 1874, 1498, 38, 30, "Input",ExpressionUUID->"fa744657-f00d-48f6-9256-e689966f17ba"],
Cell[92671, 1914, 1141, 35, 34, "Output",ExpressionUUID->"a676fd78-d64b-4623-b4e0-9e1da21850b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93849, 1954, 2917, 81, 115, "Input",ExpressionUUID->"559f3701-540c-4478-8008-e0207762f36d"],
Cell[96769, 2037, 3937, 112, 332, "Output",ExpressionUUID->"abb583d9-67b5-4d12-ae83-39a4769a6481"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100743, 2154, 163, 3, 30, "Input",ExpressionUUID->"010dbcc7-f7b1-4ec3-aa24-6e5a1b884861"],
Cell[100909, 2159, 1157, 34, 298, "Output",ExpressionUUID->"f0dc836d-dabd-42ed-8dec-6f6ac095e5e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102103, 2198, 543, 14, 30, "Input",ExpressionUUID->"ac64d18b-6dd1-4a40-b547-c39142d404ef"],
Cell[102649, 2214, 290, 6, 34, "Output",ExpressionUUID->"d15109ae-2b47-4c8c-a09f-268474ece631"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102976, 2225, 423, 13, 30, "Input",ExpressionUUID->"a98a514f-5950-4b55-aab6-98bf11950cda"],
Cell[103402, 2240, 396, 12, 34, "Output",ExpressionUUID->"5df90f04-80f1-4041-9b73-aa0aa034494c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103835, 2257, 1200, 36, 30, "Input",ExpressionUUID->"76a6084f-b0ae-45c4-ab47-8acbff7ba21a"],
Cell[105038, 2295, 1941, 59, 188, "Output",ExpressionUUID->"f1c5b1c5-faf6-4707-963d-908c3b25ea0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107016, 2359, 567, 8, 41, "WolframAlphaLong",ExpressionUUID->"57f71df0-74e4-4ba4-9d9b-b51662bcdf97"],
Cell[107586, 2369, 46093, 792, 340, "Print",ExpressionUUID->"f9b484b8-5e4c-46c2-9d47-19c84792d9e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153716, 3166, 1201, 36, 30, "Input",ExpressionUUID->"7acbab40-1454-4221-bc6a-2744cb0a6f3e"],
Cell[154920, 3204, 1946, 60, 188, "Output",ExpressionUUID->"f33b9bfa-0b89-443e-a639-d856387cf7f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[156903, 3269, 953, 22, 52, "Input",ExpressionUUID->"f251f30c-fee3-4377-84e6-5e032ea79856"],
Cell[157859, 3293, 1016, 27, 170, "Output",ExpressionUUID->"fe2e6560-b7d3-42da-8941-29f16e89000e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158912, 3325, 948, 22, 52, "Input",ExpressionUUID->"9ea49e6a-b911-4e5d-ae0c-6e7381c983a4"],
Cell[159863, 3349, 808, 20, 34, "Output",ExpressionUUID->"0b93e379-7ab9-4b02-b237-521f399e68d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[160708, 3374, 841, 22, 30, "Input",ExpressionUUID->"e3a68266-8656-4c55-9bbb-b48b5285a89d"],
Cell[161552, 3398, 905, 27, 162, "Output",ExpressionUUID->"4b1e004e-4d7a-4a57-a091-f5b416a3d433"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162494, 3430, 144, 2, 30, "Input",ExpressionUUID->"12a7d76b-15d2-4879-8119-da86b5bd728c"],
Cell[162641, 3434, 806, 20, 34, "Output",ExpressionUUID->"b81f638c-413f-409b-b5a0-37ef51e46e3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163484, 3459, 168, 2, 30, "Input",ExpressionUUID->"d948eaaa-80d3-4df4-b5ff-d60f419a9bd8"],
Cell[163655, 3463, 696, 20, 34, "Output",ExpressionUUID->"65cca746-bdc6-4171-a23b-7a753d803e4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164388, 3488, 168, 2, 30, "Input",ExpressionUUID->"ae3248fc-3f67-4e79-b48b-f5b22a81a038"],
Cell[164559, 3492, 1946, 60, 188, "Output",ExpressionUUID->"40458741-84ad-4f88-9044-1068af729f0f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166542, 3557, 144, 2, 30, "Input",ExpressionUUID->"c6ff433e-6b6a-44c2-a3a4-486319d544e0"],
Cell[166689, 3561, 238, 5, 34, "Output",ExpressionUUID->"f1277f25-9103-4e1a-a350-c845038d4909"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166964, 3571, 146, 2, 30, "Input",ExpressionUUID->"0685eb3d-c05a-4d62-b1f9-4b960a8eff47"],
Cell[167113, 3575, 397, 12, 34, "Output",ExpressionUUID->"2f9b83f1-9780-4b48-b49c-a8f4d3b17d01"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167547, 3592, 146, 2, 30, "Input",ExpressionUUID->"bc96d93d-9ccb-438a-ba46-23427d185bb4"],
Cell[167696, 3596, 397, 12, 34, "Output",ExpressionUUID->"58753e8e-ca99-4cbb-bfa2-7ed9df961a64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168130, 3613, 144, 2, 30, "Input",ExpressionUUID->"49aa96ce-6f79-4cf9-aa74-a3128cccc15e"],
Cell[168277, 3617, 209, 4, 34, "Output",ExpressionUUID->"15f00c2b-8257-44a6-8fd3-87de5ab6cbf1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168523, 3626, 154, 3, 30, "Input",ExpressionUUID->"a8218f0b-d9e7-4ab5-8465-78a97078d10c"],
Cell[168680, 3631, 402, 9, 34, "Output",ExpressionUUID->"b04c4674-4ae9-43fd-9675-0699b66d95c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169119, 3645, 180, 4, 30, "Input",ExpressionUUID->"a963429d-bb73-4a2f-bafc-333c6430064a"],
Cell[169302, 3651, 85841, 1711, 1413, "Print",ExpressionUUID->"818f0491-f661-4426-a840-a814863ca62c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[255180, 5367, 210, 3, 30, "Input",ExpressionUUID->"e506e9de-cdf3-4244-b0dc-e168b8454166"],
Cell[255393, 5372, 189, 3, 34, "Output",ExpressionUUID->"ae698c48-206c-439d-8616-f4939419dfa4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[255619, 5380, 185, 2, 41, "WolframAlphaLong",ExpressionUUID->"c6dcb0e8-31dd-44e5-a75e-b61c10c0df08"],
Cell[255807, 5384, 51529, 1022, 1817, "Print",ExpressionUUID->"4f6671c5-1947-4243-b9e4-2fdc6b7d736d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[307373, 6411, 131, 3, 30, "Input",ExpressionUUID->"cc66deb5-1329-45a4-911e-4babaa167563"],
Cell[307507, 6416, 2554, 50, 98, "Print",ExpressionUUID->"986623a3-b0c7-4e08-9496-0dc818875f87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[310098, 6471, 20782, 414, 83, "WolframAlphaShortInput",ExpressionUUID->"cd6af43f-d486-4b9b-a9ce-c1750643fa27"],
Cell[330883, 6887, 283, 9, 45, "Output",ExpressionUUID->"e3b2890e-1255-4bc4-9378-4cd68f835618"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331203, 6901, 427, 11, 30, "Input",ExpressionUUID->"2174e7d0-e3fd-425d-9be9-1ea0ec1a9448"],
Cell[331633, 6914, 172, 3, 34, "Output",ExpressionUUID->"d25b2193-070c-4e6d-8bdb-2d0e2cb38e2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331842, 6922, 375, 9, 30, "Input",ExpressionUUID->"675181fb-e201-4b2d-a420-fa06e5597b5d"],
Cell[332220, 6933, 149, 2, 34, "Output",ExpressionUUID->"326307db-9726-45e3-b0e6-5f493da0a4bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[332406, 6940, 333, 8, 30, "Input",ExpressionUUID->"cf4410b7-34c8-4cf9-b824-d5ba0dca43a4"],
Cell[332742, 6950, 172, 3, 34, "Output",ExpressionUUID->"74808fca-817c-4015-b19e-f4e0fc784c87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[332951, 6958, 586, 17, 30, "Input",ExpressionUUID->"92612781-9e76-4685-abd8-78656ead6058"],
Cell[333540, 6977, 1232, 37, 116, "Output",ExpressionUUID->"175d7fc6-f4da-45b2-bec3-bd19b2dc7d9f"]
}, Open  ]],
Cell[334787, 7017, 448, 13, 30, "Input",ExpressionUUID->"266a2498-8276-4c97-9438-f2d0f58592b0"],
Cell[335238, 7032, 149, 3, 52, "Input",ExpressionUUID->"e9de392d-2f93-4c46-9ec7-b9225b32a2a4"],
Cell[CellGroupData[{
Cell[335412, 7039, 435, 11, 30, "Input",ExpressionUUID->"3e36774e-33e2-45f9-ac74-6ea57aa18ca0"],
Cell[335850, 7052, 315, 9, 68, "Output",ExpressionUUID->"ca605e13-e446-4744-a1df-bb9f7246e054"]
}, Open  ]]
}
]
*)

