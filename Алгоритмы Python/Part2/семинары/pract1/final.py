from random import randint
from faker import Faker
from time import sleep
import texttable

class CockroachClass():
    """
    –ö–ª–∞—Å—Å —Ç–∞—Ä–∞–∫–∞–Ω
    """
    def __init__(self, name):
        self.name = name
        self.current_location = 0
        self.__speed_generator()

    def movement_changer(self):
        self.movement = bool(randint(0,1))
        #–ï—Å–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        if self.movement:
            self.current_location += self.speed
    
    def __speed_generator(self):
        #–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.speed = randint(1,10) #TODO 


class GamerClass():
    pass


class MainClass():
    
    def __init__(self):
        
        self.COCKROACH_ICON = "üêû"
        self.GRASS_ICON = "_"
        self.COCKROACH_COUNT = 4
        self.ITERATIONS_COUNT = 100
        #–•—Ä–∞–Ω–∏—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        self.cockroach_list = []
        fake = Faker(['ru_RU'])

        #–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.start_matrix_generator()
        #–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        for i in range(self.COCKROACH_COUNT):
            cockroach_obj = CockroachClass(fake.word())
            self.cockroach_list.append(cockroach_obj)
    
        for current_iteration in range(self.ITERATIONS_COUNT):
            
            print("–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ{}".format(current_iteration))
            self.drawer()
            input()
            
            try:
                self.cockroach_changer()
            #–ï—Å–ª–∏ –¥–æ–ø—Ä—ã–≥–∞–ª–∏—Å—å –¥–æ IndexError
            except IndexError:
                self.winner_detector()
                break
            
            #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏

    def winner_detector(self):
        """
        –ú–µ—Ç–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç–æ, –∫–∞–∫–æ–π —Ç–∞—Ä–∞–∫–∞–Ω –≤—ã–∏–≥—Ä–∞–ª
        """
        print("winner_detector –ø–æ–≥–Ω–∞–ª")
        winner = sorted(self.cockroach_list,key=lambda e: e.current_location,reverse=True)[0]
        print("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {}".format(winner.name))
            

    def start_matrix_generator(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        """
        #–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.matrix = [[self.GRASS_ICON for c in range(self.ITERATIONS_COUNT)] for r in range(self.COCKROACH_COUNT)]
        for i in range(len(self.matrix)):
            self.matrix[i][0] = self.COCKROACH_ICON

        
    def cockroach_changer(self):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–∞—Ä–∞–∫–∞–Ω–∞
        """
        self.matrix = [[self.GRASS_ICON for c in range(self.ITERATIONS_COUNT)] for r in range(self.COCKROACH_COUNT)]
        self.cockroach_list.sort(key=lambda e: e.current_location,reverse=True)
        table = texttable.Texttable()
        table_list = [
            ["–ú–µ—Å—Ç–æ", "–ö–ª–∏—á–∫–∞", "–¢–æ—á–∫–∞"],
            ]
        
        for i in range(len(self.cockroach_list)):
            
            cockroach = self.cockroach_list[i]
            cockroach.movement_changer()
            table_list.append([str(i+1), cockroach.name, str(cockroach.current_location)])
            self.matrix[i][cockroach.current_location] = self.COCKROACH_ICON
                         
        table.add_rows(table_list)
        print(table.draw() + "\n")


    def drawer(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω
        """

        for i in range(len(self.matrix)):
            print(i+1, end=" ")
            for j in range(len(self.matrix[i])):
                print('{}'.format(self.matrix[i][j]), end=" ")
            print("|   –¢–∞—Ä–∞–∫–∞–Ω '{}'".format(self.cockroach_list[i].name))
        
        print("\n")
        
if __name__ == "__main__":
    obj = MainClass()