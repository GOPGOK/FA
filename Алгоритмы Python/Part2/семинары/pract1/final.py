#TODO –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
from random import randint
from faker import Faker
from time import sleep
import texttable


class CockroachClass():
    """
    –ö–ª–∞—Å—Å —Ç–∞—Ä–∞–∫–∞–Ω
    """

    def __init__(self, name):
        self.__name = name
        self.__current_location = 0
        self.__speed_generator()

    def movement_changer(self):
        self.movement = bool(randint(0, 1))
        # –ï—Å–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        if self.movement:
            self.__current_location += self.__speed

    def __speed_generator(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.__speed = randint(1, 10)

    @property
    def name(self):
        return self.__name

    @property
    def current_location(self):
        return self.__current_location

    @property
    def speed(self):
        return self.__speed

class GamerClass():
    """
    –ö–ª–∞—Å—Å –≥–µ–π–º–µ—Ä, —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å:
    - –¢–∞—Ä–∞–∫–∞–Ω ( –º–æ–∂–µ—Ç –≤–∞—â –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å?)
    - –î–µ–Ω—å–≥–∏

    –û–¥–∏–Ω –∏–≥—Ä–æ–∫ = –æ–¥–∏–Ω —Ç–∞—Ä–∞–∫–∞–Ω
    """

    def __init__(self, name):
        self.__name = name
        self.__cockroach_obj = None
        self.__money = None

    @property
    def cockroach_obj(self):
        return self.__cockroach_obj

    @cockroach_obj.setter
    def cockroach_obj(self, obj):
        assert isinstance(obj, CockroachClass), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__cockroach_obj = obj

    @property
    def name(self):
        return self.__name

    @property
    def money(self):
        return self.__money

    @money.setter
    def money(self, val):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ set'–∞ —Å—Ç–∞–≤–∫–∏
        """
        assert type(val) == float, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__money = val


class MainClass():

    def __init__(self):

        self.COCKROACH_ICON = "ü¶ó"
        self.GRASS_ICON = "_"
        self.COCKROACH_COUNT = 4
        self.ITERATIONS_COUNT = 50

        # –•—Ä–∞–Ω–∏—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        self.cockroach_list = []
        
        # –•—Ä–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
        self.user_list = []
        fake = Faker(['ru_RU'])

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_input_generator()

        # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.start_matrix_generator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        for i in range(self.COCKROACH_COUNT):
            cockroach_obj = CockroachClass(fake.word())
            self.cockroach_list.append(cockroach_obj)

        # –í—ã–±–æ—Ä –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Ç–∞—Ä–∞–∫–∞–Ω
        self.user_chooser()

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        for current_iteration in range(self.ITERATIONS_COUNT):

            print("–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ{}".format(current_iteration))
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
            self.rating_drawer()
            self.game_field_drawer()
            input()

            try:
                self.cockroach_changer()
            # –ï—Å–ª–∏ –¥–æ–ø—Ä—ã–≥–∞–ª–∏—Å—å –¥–æ IndexError
            except IndexError:
                self.winner_detector()
                break

    def user_chooser(self):
        """
        –í—ã–±–æ—Ä –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Ç–∞—Ä–∞–∫–∞–Ω
        """
        
        for user in self.user_list:
            
            
                    
            allowed_cockroach_list = []
                    

            table = texttable.Texttable()
            table_list = [["‚Ññ", "–ö–ª–∏—á–∫–∞", "–°–∫–æ—Ä–æ—Å—Ç—å"],]
                    
            for i in range(len(self.cockroach_list)):
                        
                e = self.cockroach_list[i]
                allowed_cockroach_list.append(i+1)
                table_list.append([str(i+1), e.name, str(e.speed)])

            table.add_rows(table_list)
            print(table.draw() + "\n")


            processing_flag = True
            while processing_flag:
                try:
                    print("–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ —Ç–∞—Ä–∞–∫–∞–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ '{}':".format(user.name))
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞—Ä–∞–∫–∞–Ω–∞
                    selected_cockroach = int(input("\n-> "))
                    if selected_cockroach not in allowed_cockroach_list:
                        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–∞—Ä–∞–∫–∞–Ω–∞")
                    
                    obj = self.cockroach_list[selected_cockroach-1]
 
                    # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                    money = float(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ –≤—ã–∏–≥—Ä—ã—à '{}' -> ".format(obj.name)))

                    # –í–≤–æ–¥–∏–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
                    obj.selected = True
                    user.cockroach_obj = obj
                    user.money = money
                    processing_flag = False
                
                except ValueError as e:
                    print(e)
                    continue

    def rating_drawer(self):
        """
        –†–∏—Å–æ–≤–∞–ª—å—â–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        """
        #TODO –≤—ã–≤–æ–¥ –∏–≥—Ä–æ–∫–∞
        cockroach_list = self.cockroach_list.copy()
        cockroach_list.sort(key=lambda e: e.current_location, reverse=True)
        table = texttable.Texttable()
        
        table_list = [
            ["–ú–µ—Å—Ç–æ", "–ö–ª–∏—á–∫–∞", "–¢–æ—á–∫–∞"],
        ]

        for i in range(len(cockroach_list)):
            e = cockroach_list[i]
            table_list.append([str(i+1), e.name, str(e.current_location)])

        table.add_rows(table_list)
        print(table.draw() + "\n")

    def winner_detector(self):
        """
        –ú–µ—Ç–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç–æ, –∫–∞–∫–æ–π —Ç–∞—Ä–∞–∫–∞–Ω –≤—ã–∏–≥—Ä–∞–ª
        """
        winner = sorted(self.cockroach_list,
                        key=lambda e: e.current_location, reverse=True)[0]
        print("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {}".format(winner.name))
        self.rating_drawer()

        # –û–±–Ω—É–ª—è–µ–º –≤—Å–µ —Ç.–∫. –≤ –ø–æ–¥–æ–±–Ω—ã—Ö –∏–≥—Ä–∞—Ö –≤—Å–µ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç
        for u in self.user_list:
            u.money = 0.0

        old_money = []
        win_obj_usesrs_list = []
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        for u in self.user_list:
            if u.cockroach_obj == winner:
                win_obj_usesrs_list.append(u)
            else:
                
                all_money = GamerClass.static_all_money
                print("{} –ø–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É {} —Ä—É–±.!".format(u.name, all_money))
                u.money = float(all_money)

    def user_input_generator(self):
        """
        –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫
        """
        input_flag = True
        while input_flag:
            try:
                users_count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ -> "))
                input_flag = False
            except ValueError:
                continue
    
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i in range(users_count):
            curent_user_name = input("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Ññ{} -> ".format(i+1))
            user_obj = GamerClass(curent_user_name)
            self.user_list.append(user_obj)
        

    def start_matrix_generator(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        """
        # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.matrix = [[self.GRASS_ICON for c in range(
            self.ITERATIONS_COUNT)] for r in range(self.COCKROACH_COUNT)]
        for i in range(len(self.matrix)):
            self.matrix[i][0] = self.COCKROACH_ICON

    def cockroach_changer(self):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–∞—Ä–∞–∫–∞–Ω–∞
        """
        self.matrix = [[self.GRASS_ICON for c in range(
            self.ITERATIONS_COUNT)] for r in range(self.COCKROACH_COUNT)]

        for i in range(len(self.cockroach_list)):

            e = self.cockroach_list[i]
            e.movement_changer()
            self.matrix[i][e.current_location] = self.COCKROACH_ICON

    def game_field_drawer(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        """

        for i in range(len(self.matrix)):
            print(i+1, end=" ")
            for j in range(len(self.matrix[i])):
                print('{}'.format(self.matrix[i][j]), end=" ")
            print("|   –¢–∞—Ä–∞–∫–∞–Ω '{}'".format(self.cockroach_list[i].name))

        print("\n")


if __name__ == "__main__":
    obj = MainClass()
