# TODO –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–Ω–∫
# TODO –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
# TODO –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–±–µ–≥–æ–≤, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, —É –∫–æ–≥–æ 0 —Ä—É–± –æ—Å—Ç–∞–µ—Ç—Å—è, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç - —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–µ–Ω–µ–≥
#TODO –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π > 0

from random import randint
from faker import Faker
from time import sleep
import texttable


class CockroachClass():
    """
    –ö–ª–∞—Å—Å —Ç–∞—Ä–∞–∫–∞–Ω
    """

    def __init__(self, name):
        self.__name = name
        self.__current_location = 0
        self.__speed_generator()

    def movement_changer(self):
        self.movement = bool(randint(0, 1))
        # –ï—Å–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        if self.movement:
            self.__current_location += self.__speed

    def __speed_generator(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.__speed = randint(1, 10)

    @property
    def name(self):
        return self.__name

    @property
    def current_location(self):
        return self.__current_location

    @property
    def speed(self):
        return self.__speed


class GamerClass():
    """
    –ö–ª–∞—Å—Å –≥–µ–π–º–µ—Ä, —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å:
    - –¢–∞—Ä–∞–∫–∞–Ω ( –º–æ–∂–µ—Ç –≤–∞—â –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å?)
    - –î–µ–Ω—å–≥–∏

    –û–¥–∏–Ω –∏–≥—Ä–æ–∫ = –æ–¥–∏–Ω —Ç–∞—Ä–∞–∫–∞–Ω
    """

    def __init__(self, name, begin_money=1500):
        self.__name = name
        self.__cockroach_obj = None
        self.__all_money = begin_money
        self.__locale_money = None

    @property
    def cockroach_obj(self):
        return self.__cockroach_obj

    @cockroach_obj.setter
    def cockroach_obj(self, obj):
        assert isinstance(obj, CockroachClass), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__cockroach_obj = obj

    @property
    def name(self):
        return self.__name

    #–ê –Ω—É–∂–µ–Ω –ª–∏ —Å–µ—Ç—Ç–µ—Ä
    @property
    def all_money(self):
        return self.__all_money

    @all_money.setter
    def all_money(self, val):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ set'–∞ —Å—Ç–∞–≤–∫–∏
        """
        assert type(val) == float, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__all_money = val

    @property
    def locale_money(self):
        return self.__locale_money

    @locale_money.setter
    def locale_money(self, new_money):
        assert type(new_money) == float, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__all_money -= new_money 
        self.__locale_money = new_money

    def opportunity_checker(self, money):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
        """
        if self.__all_money - money < 0:
            return False
        return True


class RaceClass():
    """
    –ö–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–∏
    """
    
    def __init__(self, user_list):
        
        self.user_list = user_list
        self.COCKROACH_COUNT = len(user_list)*2
        self.COCKROACH_ICON = "ü¶ó"
        self.GRASS_ICON = "_"
        self.ITERATIONS_COUNT = 50

        fake = Faker(['ru_RU'])

        # –•—Ä–∞–Ω–∏—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        self.cockroach_list = []

        # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.start_matrix_generator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        for i in range(self.COCKROACH_COUNT):
            cockroach_obj = CockroachClass(fake.word())
            self.cockroach_list.append(cockroach_obj)

        # –í—ã–±–æ—Ä –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Ç–∞—Ä–∞–∫–∞–Ω
        self.user_chooser()

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        for current_iteration in range(self.ITERATIONS_COUNT):

            print("–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ{}".format(current_iteration))
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
            self.rating_drawer()
            self.game_field_drawer()
            input()

            try:
                self.cockroach_changer()
            # –ï—Å–ª–∏ –¥–æ–ø—Ä—ã–≥–∞–ª–∏—Å—å –¥–æ IndexError
            except IndexError:
                self.winner_detector()
                break

    def getusers_cockroachobj(self, obj):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—ä–µ–∫—Ç—É —Ç–∞—Ä–∞–∫–∞–Ω–∞
        """
        out_names = []
        for e in self.user_list:
            if e.cockroach_obj == obj:
                out_names.append(e.name)

        return ", ".join(out_names)

    def user_chooser(self):
        """
        –í—ã–±–æ—Ä –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Ç–∞—Ä–∞–∫–∞–Ω
        """

        for user in self.user_list:

            allowed_cockroach_list = []

            table = texttable.Texttable()
            table_list = [["‚Ññ", "–ö–ª–∏—á–∫–∞", "–°–∫–æ—Ä–æ—Å—Ç—å"], ]

            for i in range(len(self.cockroach_list)):

                e = self.cockroach_list[i]
                allowed_cockroach_list.append(i+1)
                table_list.append([str(i+1), e.name, str(e.speed)])

            table.add_rows(table_list)
            print(table.draw() + "\n")

            processing_flag = True
            while processing_flag:
                try:
                    print("–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ —Ç–∞—Ä–∞–∫–∞–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ '{}':".format(user.name))

                    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞—Ä–∞–∫–∞–Ω–∞
                    selected_cockroach = int(input("\n-> "))
                    if selected_cockroach not in allowed_cockroach_list:
                        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–∞—Ä–∞–∫–∞–Ω–∞")

                    obj = self.cockroach_list[selected_cockroach-1]

                    # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                    money = float(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ –≤—ã–∏–≥—Ä—ã—à '{}', –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {} —Ä—É–±.\n-> ".format(obj.name, user.all_money)))
                    
                    #–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ, —á—Ç–æ–± —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –¥–µ–Ω—å–≥–∏
                    if user.opportunity_checker(money):
                        # –í–≤–æ–¥–∏–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
                        obj.selected = True
                        user.cockroach_obj = obj
                        user.locale_money = money
                        processing_flag = False
                    
                    else:
                        print("–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ {} –≤ —Ä–∞–∑–º–µ—Ä–µ {} —Ä—É–±.".format(obj.name, money))

                except ValueError as e:
                    print(e)
                    continue

    def rating_drawer(self):
        """
        –†–∏—Å–æ–≤–∞–ª—å—â–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        """
        cockroach_list = self.cockroach_list.copy()
        cockroach_list.sort(key=lambda e: e.current_location, reverse=True)
        table = texttable.Texttable()

        table_list = [
            ["–ú–µ—Å—Ç–æ", "–ö–ª–∏—á–∫–∞", "–¢–æ—á–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ]

        for i in range(len(cockroach_list)):
            e = cockroach_list[i]
            table_list.append(
                [str(i+1), e.name, str(e.current_location), self.getusers_cockroachobj(e)])

        table.add_rows(table_list)
        print(table.draw() + "\n")

    def winner_detector(self):
        # TODO
        """
        –ú–µ—Ç–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç–æ, –∫–∞–∫–æ–π —Ç–∞—Ä–∞–∫–∞–Ω –≤—ã–∏–≥—Ä–∞–ª
        """
        winner = sorted(self.cockroach_list,
                        key=lambda e: e.current_location, reverse=True)[0]
        print("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {}".format(winner.name))
        self.rating_drawer()

        old_money = 0
        win_obj_users_list = []

        # –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        for u in self.user_list:
            if u.cockroach_obj == winner:
                win_obj_users_list.append(u)

            else:
                old_money += u.money
                u.money = 0.0

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        if len(win_obj_users_list) != 0:
            koff = old_money/len(win_obj_users_list)
            for obj in win_obj_users_list:
                obj.money += koff
                print("{} –ø–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É {} —Ä—É–±, –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥: {}".format(obj.name, koff, obj.money))
        
        else:
            for u in self.user_list:
                print(u.money)

    def start_matrix_generator(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        """
        # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.matrix = [[self.GRASS_ICON for c in range(
            self.ITERATIONS_COUNT)] for r in range(self.COCKROACH_COUNT)]
        for i in range(len(self.matrix)):
            self.matrix[i][0] = self.COCKROACH_ICON

    def cockroach_changer(self):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–∞—Ä–∞–∫–∞–Ω–∞
        """
        self.matrix = [[self.GRASS_ICON for c in range(
            self.ITERATIONS_COUNT)] for r in range(self.COCKROACH_COUNT)]

        for i in range(len(self.cockroach_list)):

            e = self.cockroach_list[i]
            e.movement_changer()
            self.matrix[i][e.current_location] = self.COCKROACH_ICON

    def game_field_drawer(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        """

        for i in range(len(self.matrix)):
            print(i+1, end=" ")
            for j in range(len(self.matrix[i])):
                print('{}'.format(self.matrix[i][j]), end=" ")
            print("|   –¢–∞—Ä–∞–∫–∞–Ω '{}'".format(self.cockroach_list[i].name))

        print("\n")

class MainClass():

    def __init__(self):

        # –•—Ä–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
        self.user_list = []

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.user_input_generator()

        #–ü–æ–∫–∞ —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ 0 —Ä—É–±, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –≥–æ–Ω–∫—É
        while self.gameover_detector:
            
            input("–í—ã –≥–æ—Ç–æ–≤—ã –∫ –≥–æ–Ω–∫–µ?")
            #TODO –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è user_list —Ç.–∫. —Ç–∞–º –≤—Ä–æ–¥–µ –∫–∞–∫ —É–∂–µ –¥—Ä–æ—É–≥–∏–µ –æ–±—ä–∫—Ç—ã, —ç—Ç–æ –∂–µ —Å—Å—ã–ª–∫–∞? (—è –Ω–µ –ø–æ–º–Ω—é)
            RaceClass(self.user_list)
    
    def gameover_detector(self):
        """
        –ú–µ—Ç–æ–¥, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        (–ø–æ–∫–∞ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏)
        """
        for u in self.user_list:
            if u.all_money <= 0:
                return False
        return True
                            
    def user_input_generator(self):
        """
        –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫
        """
        input_flag = True
        while input_flag:
            try:
                users_count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ -> "))
                input_flag = False
            except ValueError:
                continue

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i in range(users_count):
            curent_user_name = input(
                "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Ññ{} -> ".format(i+1))
            user_obj = GamerClass(curent_user_name)
            self.user_list.append(user_obj)

if __name__ == "__main__":
    obj = MainClass()
